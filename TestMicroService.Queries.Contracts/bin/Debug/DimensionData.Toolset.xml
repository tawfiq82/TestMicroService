<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DimensionData.Toolset</name>
    </assembly>
    <members>
        <member name="T:DimensionData.Toolset.Configuration.IConfigurationStore">
            <summary>
            Defines a configuration store for non-secure data.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.IConfigurationStore.GetSection``1(System.String)">
            <summary>
            Reads a section from the configuration source and returns its deserialized form.
            </summary>
            <typeparam name="TConfigClass">Expected type corresponding to the section.</typeparam>
            <param name="path">Name of or path to the section in the configuration source.</param>
            <returns>An object created from deserializing the data in the specific section.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Configuration.ISecureConfigurationStore">
            <summary>
            Defines a configuration store for secure data.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.ISecureConfigurationStore.GetSection``1(System.String)">
            <summary>
            Reads a section from the secret configuration source and returns its deserialized form.
            </summary>
            <typeparam name="TConfigClass">Expected type corresponding to the section.</typeparam>
            <param name="path">Name of or path to the section in the configuration source.</param>
            <returns>An object created from deserializing the data in the specific section.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Configuration.Stores.AppConfigSecureConfigurationStore">
            <summary>
            Configuration provider that reads secrets from the app.config or web.config file.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.Stores.AppConfigSecureConfigurationStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.Configuration.Stores.AppConfigSecureConfigurationStore"/> class.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.Stores.AppConfigSecureConfigurationStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.Configuration.Stores.AppConfigSecureConfigurationStore"/> class.
            </summary>
            <param name="rootPath">The configuration root path.</param>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.Stores.AppConfigSecureConfigurationStore.GetSection``1(System.String)">
            <summary>
            Returns a deserialized object created from a section in the web.config or app.config.
            </summary>
            <typeparam name="TConfigClass"></typeparam>
            <param name="path">Expected type corresponding to the section.</param>
            <returns>An object created from deserializing the data in the specific section.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Configuration.Stores.ConfigurationStore">
            <summary>
            Provides configuration settings from multiple sources, like web.config and Consul.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Configuration.Stores.ConfigurationStore.AppSettings">
            <summary>
            Returns the values of application parameters specified by their names.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.Stores.ConfigurationStore.GetSection``1(System.String)">
            <summary>
            Reads a section from the configuration source and returns its deserialized form.
            </summary>
            <typeparam name="TConfigClass">Expected type corresponding to the section.</typeparam>
            <param name="path">Name of or path to the section in the configuration source.</param>
            <returns>An object created from deserializing the data in the specific section.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.Stores.ConfigurationStore.Configure(DimensionData.Toolset.Configuration.IConfigurationProvider[])">
            <summary>
            Allows to set up a set of application setting providers. The providers are checked for a specific setting in the order specified in the array.
            </summary>
            <param name="providers"></param>
        </member>
        <member name="T:DimensionData.Toolset.Configuration.Stores.ConfigurationStore.MultiProviderProvider">
            <summary>
            Allows to read settings from multiple sources.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.Stores.ConfigurationStore.MultiProviderProvider.#ctor(DimensionData.Toolset.Configuration.IConfigurationProvider[])">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="providers">List of setting providers.</param>
        </member>
        <member name="P:DimensionData.Toolset.Configuration.Stores.ConfigurationStore.MultiProviderProvider.Item(System.String)">
            <summary>
            Returns the value of the setting specified by its name, or an empty string if the key is not found.
            </summary>
            <param name="name">The name of the configuration key to be returned.</param>
            <returns>The value of the specified configuration key, or null if the key does not exist in any of the given providers.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.Stores.ConfigurationStore.MultiProviderProvider.GetSection``1(System.String)">
            <summary>
            Reads the section from all providers and returns the object constructed using the data from the sections.
            </summary>
            <typeparam name="TConfigClass"></typeparam>
            <param name="path">The path to the configuration.</param>
            <returns>The configuration section.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Configuration.Providers.AppConfigConfigurationProvider">
            <summary>
            Configuration provider that reads settings from the app.config or web.config file.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.Providers.AppConfigConfigurationProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.Configuration.Providers.AppConfigConfigurationProvider"/> class.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.Providers.AppConfigConfigurationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.Configuration.Providers.AppConfigConfigurationProvider"/> class.
            </summary>
            <param name="rootPath">The configuration root path.</param>
        </member>
        <member name="P:DimensionData.Toolset.Configuration.Providers.AppConfigConfigurationProvider.Item(System.String)">
            <summary>
            Returns settings from the app.config or web.config file.
            </summary>
            <param name="name">The setting name to be returned.</param>
            <returns>The value of the specified setting or null if setting does not exist.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.Providers.AppConfigConfigurationProvider.GetSection``1(System.String)">
            <summary>
            Returns a deserialized object created from a section in the web.config or app.config.
            </summary>
            <typeparam name="TConfigClass"></typeparam>
            <param name="sectionName">Expected type corresponding to the section.</param>
            <returns>An object created from deserializing the data in the specific section.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.Providers.AppConfigConfigurationProvider.MergeFromSection``1(System.String,``0)">
            <summary>
            Reads a section from the configuration source and merges its deserialized form into the previously created object.
            </summary>
            <typeparam name="TConfigClass">Expected type corresponding to the section.</typeparam>
            <param name="sectionName">Name of or path to the section in the configuration source.</param>
            <param name="configObject">The object the values from the section to be put into.</param>
        </member>
        <member name="T:DimensionData.Toolset.Configuration.DdConfigurationManager">
            <summary>
            Provides configuration settings from multiple sources, like web.config and Consul.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Configuration.DdConfigurationManager.Store">
            <summary>
            Gets the internal configuration store.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Configuration.DdConfigurationManager.AppSettings">
            <summary>
            Returns the values of application parameters specified by their names.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.DdConfigurationManager.GetSection``1(System.String)">
            <summary>
            Reads a section from the configuration source and returns its deserialized form.
            </summary>
            <typeparam name="TConfigClass">Expected type corresponding to the section.</typeparam>
            <param name="path">Name of or path to the section in the configuration source.</param>
            <returns>An object created from deserializing the data in the specific section.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.DdConfigurationManager.Configure(DimensionData.Toolset.Configuration.IConfigurationProvider[])">
            <summary>
            Allows to set up a set of application setting providers. The providers are checked for a specific setting in the order specified in the array.
            </summary>
            <param name="providers"></param>
        </member>
        <member name="T:DimensionData.Toolset.Configuration.IConfigurationKeyValuePairs">
            <summary>
            Abstracts basic configuration provider settings.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Configuration.IConfigurationKeyValuePairs.Item(System.String)">
            <summary>
            Gets an entry with the specified key from the configuration settings.
            </summary>
            <param name="name">The key of the entry to locate. The key can be null.</param>
            <returns>A String that contains the comma-separated list of values associated with the specified key, if found; otherwise, null.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Configuration.IConfigurationProvider">
            <summary>
            Defines a configuration provider that can be registered with the DdConfigurationManager.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Configuration.IConfigurationProvider.Item(System.String)">
            <summary>
            Gets an entry with the specified key from the configuration source.
            </summary>
            <param name="name">The key of the entry to locate. The key can be null.</param>
            <returns>A string that contains the comma-separated list of values associated with the specified key, if found; otherwise, null.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.IConfigurationProvider.GetSection``1(System.String)">
            <summary>
            Reads a section from the configuration source and returns its deserialized form.
            </summary>
            <typeparam name="TConfigClass">Expected type corresponding to the section.</typeparam>
            <param name="sectionName">Name of or path to the section in the configuration source.</param>
            <returns>An object created from deserializing the data in the specific section.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.IConfigurationProvider.MergeFromSection``1(System.String,``0)">
            <summary>
            Reads a section from the configuration source and merges its deserialized form into the previously created object.
            </summary>
            <typeparam name="TConfigClass">Expected type corresponding to the section.</typeparam>
            <param name="sectionName">Name of or path to the section in the configuration source.</param>
            <param name="configObject">The object the values from the section to be put into.</param>
        </member>
        <member name="T:DimensionData.Toolset.Configuration.Sections.ConnectionStringSection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationSection"/> class for connection strings.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Configuration.Sections.ConnectionStringSection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement" /> object is read-only.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Configuration.Sections.ConnectionStringSection.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.CqrsModule">
            <summary>
            An implementation of <see cref="T:DimensionData.Toolset.DependencyInjection.IModule"/> to register the CQRS services.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.CqrsModule.Initialize(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
            Initializes the current module instance into a specified container builder.
            </summary>
            <param name="builder">The dependency injection container builder.</param>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.ActivityCorrelationScopeSystemEventDecorator`1">
            <summary>
            Ensures that the system event is handled within a <see cref="T:DimensionData.Toolset.Diagnostics.ActivityScope"/>
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.ActivityCorrelationScopeSystemEventDecorator`1.#ctor(DimensionData.Toolset.Cqrs.ISystemEventHandler{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.ActivityCorrelationScopeSystemEventDecorator`1"/> class.
            </summary>
            <param name="decorated">The decorated system event handler.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.ActivityCorrelationScopeSystemEventDecorator`1.Handle(`0)">
            <summary>
            Handles the specified event.
            </summary>
            <param name="event">The event.</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.ActivityCorrelationScopeCommandDecorator`1">
            <summary>
            Ensures that the command is handled within a <see cref="T:DimensionData.Toolset.Diagnostics.ActivityScope"/>
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.ActivityCorrelationScopeCommandDecorator`1.#ctor(DimensionData.Toolset.Cqrs.ICommandHandler{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.ActivityCorrelationScopeCommandDecorator`1"/> class.
            </summary>
            <param name="decorated">The decorated command handler.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.ActivityCorrelationScopeCommandDecorator`1.Handle(`0)">
            <summary>
            Handles the specified command.
            </summary>
            <param name="command">The command to handle.</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.ActivityCorrelationScopeQueryDecorator`2">
            <summary>
            Ensures that the query is handled within a <see cref="T:DimensionData.Toolset.Diagnostics.ActivityScope"/>
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.ActivityCorrelationScopeQueryDecorator`2.#ctor(DimensionData.Toolset.Cqrs.IQueryHandler{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.ActivityCorrelationScopeQueryDecorator`2"/> class.
            </summary>
            <param name="decorated">The decorated query handler.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.ActivityCorrelationScopeQueryDecorator`2.Read(`0)">
            <summary>
            Reads the specified query.
            </summary>
            <param name="query">The query to process.</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.IDomainEventDecorator`1">
            <summary>
                Defines a decorator for domain event handlers. Each decorator provides the ability to add additional functionality to
                domain event handlers while not violating the single responsibility principle or the open/closed principle for the
                S.O.L.I.D design patterns.
            </summary>
            <typeparam name="TDomainEvent">The type of the domain event.</typeparam>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.ISystemEventDecorator`1">
            <summary>
                Defines a decorator for system event handlers. Each decorator provides the ability to add additional functionality to
                system event handlers while not violating the single responsibility principle or the open/closed principle for the
                S.O.L.I.D design patterns.
            </summary>
            <typeparam name="TSystemEvent">The type of the system event.</typeparam>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.LogCommandDecorator`1">
            <summary>
            A decorator for <see cref="T:DimensionData.Toolset.Cqrs.Decorators.ICommandDecorator`1" /> implementations which logs the entire message.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.LogCommandDecorator`1.#ctor(DimensionData.Toolset.Cqrs.ICommandHandler{`0},DimensionData.Toolset.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.LogCommandDecorator`1"/> class.
            </summary>
            <param name="commandHandler">The command handler to decorate.</param>
            <param name="logger">The logger instance to use.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.LogCommandDecorator`1.Handle(`0)">
            <summary>
            Handles the specified command.
            </summary>
            <param name="command">The command to handle.</param>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.LogDomainEventDecorator`1">
            <summary>
            A decorator for <see cref="T:DimensionData.Toolset.Cqrs.Decorators.IDomainEventDecorator`1" /> implementations which logs the entire message.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.LogDomainEventDecorator`1.#ctor(DimensionData.Toolset.Domain.IDomainEventHandler{`0},DimensionData.Toolset.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.LogDomainEventDecorator`1"/> class.
            </summary>
            <param name="eventHandler">The event handler to decorate.</param>
            <param name="logger">The logger instance to use.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.LogDomainEventDecorator`1.Handle(`0)">
            <summary>
            Handles the specified event.
            </summary>
            <param name="event">The event to handle.</param>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.LogSystemEventDecorator`1">
            <summary>
            A decorator for <see cref="T:DimensionData.Toolset.Cqrs.Decorators.ISystemEventDecorator`1" /> implementations which logs the entire message.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.LogSystemEventDecorator`1.#ctor(DimensionData.Toolset.Cqrs.ISystemEventHandler{`0},DimensionData.Toolset.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.LogSystemEventDecorator`1"/> class.
            </summary>
            <param name="eventHandler">The event handler to decorate.</param>
            <param name="logger">The logger instance to use.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.LogSystemEventDecorator`1.Handle(`0)">
            <summary>
            Handles the specified event.
            </summary>
            <param name="event">The event to handle.</param>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.LogQueryDecorator`2">
            <summary>
            A decorator for <see cref="T:DimensionData.Toolset.Cqrs.Decorators.IQueryDecorator`2" /> implementations which logs the entire message.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.LogQueryDecorator`2.#ctor(DimensionData.Toolset.Cqrs.IQueryHandler{`0,`1},DimensionData.Toolset.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.LogQueryDecorator`2"/> class.
            </summary>
            <param name="queryHandler">The query handler to decorate.</param>
            <param name="logger">The logger instance to use.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.LogQueryDecorator`2.Read(`0)">
            <summary>
            Executes the specified query.
            </summary>
            <param name="query">The query to execute.</param>
            <returns>The query result.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.SnapshotTransactionCommandDecorator`1">
            <summary>
                A decorator that wraps the command handler within a .NET transaction using <see cref="F:System.Transactions.IsolationLevel.Snapshot"/>.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.SnapshotTransactionCommandDecorator`1.#ctor(DimensionData.Toolset.Cqrs.ICommandHandler{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.ReadCommittedTransactionCommandDecorator`1" /> class.
            </summary>
            <param name="decorated">The decorated.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.SnapshotTransactionCommandDecorator`1.Handle(`0)">
            <summary>
                Handles the specified command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.SnapshotTransactionSystemEventDecorator`1">
            <summary>
                A decorator that wraps the system event handler within a .NET transaction using <see cref="F:System.Transactions.IsolationLevel.Snapshot"/>.
            </summary>
            <typeparam name="TSystemEvent">The type of the system event.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.SnapshotTransactionSystemEventDecorator`1.#ctor(DimensionData.Toolset.Cqrs.ISystemEventHandler{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.ReadCommittedTransactionCommandDecorator`1" /> class.
            </summary>
            <param name="decorated">The decorated.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.SnapshotTransactionSystemEventDecorator`1.Handle(`0)">
            <summary>
                Handles the specified system event.
            </summary>
            <param name="event">The system event.</param>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.ReadCommittedTransactionSystemEventDecorator`1">
            <summary>
                A decorator that wraps the system event handler within a .NET transaction using <see cref="F:System.Transactions.IsolationLevel.ReadCommitted"/>.
            </summary>
            <typeparam name="TSystemEvent">The type of the system event.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.ReadCommittedTransactionSystemEventDecorator`1.#ctor(DimensionData.Toolset.Cqrs.ISystemEventHandler{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.ReadCommittedTransactionCommandDecorator`1" /> class.
            </summary>
            <param name="decorated">The decorated.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.ReadCommittedTransactionSystemEventDecorator`1.Handle(`0)">
            <summary>
                Handles the specified system event.
            </summary>
            <param name="event">The system event.</param>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.ValidationSystemEventDecorator`1">
            <summary>
                A decorator for <see cref="T:DimensionData.Toolset.Cqrs.Decorators.ISystemEventDecorator`1" /> implementations which
                performs validation of the properties using data annotations.
            </summary>
            <typeparam name="TSystemEvent">The type of the command.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.ValidationSystemEventDecorator`1.#ctor(DimensionData.Toolset.Cqrs.ISystemEventHandler{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.ValidationSystemEventDecorator`1" /> class.
            </summary>
            <param name="systemEventHandler">The command handler to decorate.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.ValidationSystemEventDecorator`1.Handle(`0)">
            <summary>
                Handles the specified system event.
            </summary>
            <param name="event">The system event to handle.</param>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.ValidationCommandDecorator`1">
            <summary>
                A decorator for <see cref="T:DimensionData.Toolset.Cqrs.Decorators.ICommandDecorator`1" /> implementations which
                performs validation of the properties using data annotations.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.ValidationCommandDecorator`1.#ctor(DimensionData.Toolset.Cqrs.ICommandHandler{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.ValidationCommandDecorator`1" /> class.
            </summary>
            <param name="commandHandler">The command handler to decorate.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.ValidationCommandDecorator`1.Handle(`0)">
            <summary>
                Handles the specified command.
            </summary>
            <param name="command">The command to handle.</param>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.ValidationQueryDecorator`2">
            <summary>
                A decorator for <see cref="T:DimensionData.Toolset.Cqrs.Decorators.IQueryDecorator`2" /> implementations which
                performs validation of the properties using data annotations.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TResult">The type of the response.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.ValidationQueryDecorator`2.#ctor(DimensionData.Toolset.Cqrs.IQueryHandler{`0,`1})">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.ValidationQueryDecorator`2" /> class.
            </summary>
            <param name="queryHandler">The query handler to decorate.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.ValidationQueryDecorator`2.Read(`0)">
            <summary>
                Executes the specified query.
            </summary>
            <param name="query">The query to execute.</param>
            <returns>The query result.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.AuthorizationCommandDecorator`1">
            <summary>
            Authorizes the execution of the supplied command.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.AuthorizationCommandDecorator`1.#ctor(DimensionData.Toolset.Cqrs.ICommandHandler{`0},DimensionData.Toolset.Cqrs.Security.IAuthorizationManager{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.AuthorizationCommandDecorator`1"/> class.
            </summary>
            <param name="decorated">The decorated command handler.</param>
            <param name="authorizationManager">The authorization manager.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.AuthorizationCommandDecorator`1.Handle(`0)">
            <summary>
            Handles the specified command.
            </summary>
            <param name="command">The command to handle.</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.AuthorizationQueryDecorator`2">
            <summary>
            Authorizes the execution of the supplied query.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.AuthorizationQueryDecorator`2.#ctor(DimensionData.Toolset.Cqrs.IQueryHandler{`0,`1},DimensionData.Toolset.Cqrs.Security.IAuthorizationManager{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.AuthorizationQueryDecorator`2"/> class.
            </summary>
            <param name="decorated">The decorated query handler.</param>
            <param name="authorizationManager">The authorization manager.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.AuthorizationQueryDecorator`2.Read(`0)">
            <summary>
            Reads the specified query.
            </summary>
            <param name="query">The query to process.</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.TransientSqlErrorQueryDecorator`2">
            <summary>
                Decorator adding retry logic for SQL Azure / SQL Server transient errors.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TResult">The type of the response.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.TransientSqlErrorQueryDecorator`2.#ctor(DimensionData.Toolset.Cqrs.IQueryHandler{`0,`1})">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.TransientSqlErrorQueryDecorator`2" /> class.
            </summary>
            <param name="decorated">The decorated.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.TransientSqlErrorQueryDecorator`2.Read(`0)">
            <summary>
                Reads the specified query.
            </summary>
            <param name="query">The query.</param>
            <returns>TResponse.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.TransientSqlErrorCommandDecorator`1">
            <summary>
                Decorator adding retry logic for SQL Azure / SQL Server transient errors.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.TransientSqlErrorCommandDecorator`1.#ctor(DimensionData.Toolset.Cqrs.ICommandHandler{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.TransientSqlErrorCommandDecorator`1" /> class.
            </summary>
            <param name="decorated">The decorated.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.TransientSqlErrorCommandDecorator`1.Handle(`0)">
            <summary>
                Handles the specified command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.ReadCommittedTransactionCommandDecorator`1">
            <summary>
                A decorator that wraps the command handler within a .NET transaction using <see cref="F:System.Transactions.IsolationLevel.ReadCommitted"/>.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.ReadCommittedTransactionCommandDecorator`1.#ctor(DimensionData.Toolset.Cqrs.ICommandHandler{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Decorators.ReadCommittedTransactionCommandDecorator`1" /> class.
            </summary>
            <param name="decorated">The decorated.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Decorators.ReadCommittedTransactionCommandDecorator`1.Handle(`0)">
            <summary>
                Handles the specified command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.ICommandDecorator`1">
            <summary>
                Defines a decorator for command handlers. Each decorator provides the ability to add additional functionality to
                command handlers while not violating the single responsibility principle or the open/closed principle for the
                S.O.L.I.D design patterns.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Decorators.IQueryDecorator`2">
            <summary>
                Defines a decorator for query handlers. Each decorator provides the ability to add additional functionality to
                query handlers while not violating the single responsibility principle or the open/closed principle for the
                S.O.L.I.D design patterns.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TResult">The type of the response.</typeparam>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.DependencyInjectionCommandBus">
            <summary>
            A default implementation of <see cref="T:DimensionData.Toolset.Cqrs.ICommandBus"/> using <see cref="T:DimensionData.Toolset.DependencyInjection.IDependencyContainer"/> to resolve the handlers for a command.
            </summary>
            <seealso cref="T:DimensionData.Toolset.Cqrs.ICommandBus" />
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.DependencyInjectionCommandBus.#ctor(DimensionData.Toolset.DependencyInjection.IDependencyContainer)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.DependencyInjectionCommandBus"/> class.
            </summary>
            <param name="container">The dependency injection container.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.DependencyInjectionCommandBus.Send``1(``0)">
            <summary>
                Routes the specified command to the relevant command handler.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="command">The command to be routed.</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.DependencyInjectionQueryProcessor">
            <summary>
            A default implementation of <see cref="T:DimensionData.Toolset.Cqrs.IQueryProcessor"/> using <see cref="T:DimensionData.Toolset.DependencyInjection.IDependencyContainer"/> to resolve the handlers for a query.
            </summary>
            <seealso cref="T:DimensionData.Toolset.Cqrs.IQueryProcessor" />
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.DependencyInjectionQueryProcessor.#ctor(DimensionData.Toolset.DependencyInjection.IDependencyContainer)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.DependencyInjectionQueryProcessor"/> class.
            </summary>
            <param name="container">The dependency injection container.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.DependencyInjectionQueryProcessor.ProcessQuery``2(``0)">
            <summary>
                Processes the query.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">The query to process.</param>
            <returns>The relevant query response.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.DependencyInjectionSystemEventBus">
            <summary>
            A default implementation of <see cref="T:DimensionData.Toolset.Cqrs.ISystemEventBus"/> using <see cref="T:DimensionData.Toolset.DependencyInjection.IDependencyContainer"/> to resolve the handlers for a system event.
            </summary>
            <seealso cref="T:DimensionData.Toolset.Cqrs.ISystemEventBus" />
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.DependencyInjectionSystemEventBus.#ctor(DimensionData.Toolset.DependencyInjection.IDependencyContainer)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.DependencyInjectionSystemEventBus"/> class.
            </summary>
            <param name="container">The dependency injection container.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.DependencyInjectionSystemEventBus.Publish``1(``0)">
            <summary>
                Publishes the specified event. Delivers the event to the registered event handler.
            </summary>
            <typeparam name="TSystemEvent">The type of the event.</typeparam>
            <param name="event">The event.</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.ICommand">
            <summary>
                Represents the contract for a command as specified in the CQRS pattern.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.IMessage">
            <summary>
                Defines a contract for all messages.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.ISystemEvent">
            <summary>
                Represents the contract for a system event.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.ISystemEventBus">
            <summary>
                Represents a generic event bus.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.ISystemEventBus.Publish``1(``0)">
            <summary>
                Publishes the specified event. Delivers the event to the registered event handler.
            </summary>
            <typeparam name="TSystemEvent">The type of the event.</typeparam>
            <param name="event">The event.</param>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.ISystemEventHandler`1">
            <summary>
                Represents a generic event handler.
            </summary>
            <typeparam name="TSystemEvent">The type of the event.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.ISystemEventHandler`1.Handle(`0)">
            <summary>
                Handles the specified event.
            </summary>
            <param name="event">The event.</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Messaging.SystemEventHandlerExceptionInfo">
            <summary>
                Contains the error details of an exception that occured during the processing of a system event.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Messaging.SystemEventHandlerExceptionInfo.#ctor(System.String,System.String,System.String,System.String,DimensionData.Toolset.Cqrs.Messaging.SystemEventHandlerExceptionInfo)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Messaging.SystemEventHandlerExceptionInfo"/> class.
            </summary>
            <param name="exceptionType">Type of the exception.</param>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="stackTrace">The stack trace.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:DimensionData.Toolset.Cqrs.Messaging.SystemEventHandlerExceptionInfo.ExceptionType">
            <summary>
                Gets the type of the exception.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Cqrs.Messaging.SystemEventHandlerExceptionInfo.Message">
            <summary>
                Gets the message.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Cqrs.Messaging.SystemEventHandlerExceptionInfo.Source">
            <summary>
                Gets the source.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Cqrs.Messaging.SystemEventHandlerExceptionInfo.StackTrace">
            <summary>
                Gets the stack trace.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Cqrs.Messaging.SystemEventHandlerExceptionInfo.InnerException">
            <summary>
                Gets the inner exception.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Messaging.ISystemEventFaultHandler`1">
            <summary>
            Defines the interface for classes which handle faulted system events.
            </summary>
            <typeparam name="TSystemEvent">The type of the system event.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Messaging.ISystemEventFaultHandler`1.HandleFault(`0,System.Collections.Generic.IEnumerable{DimensionData.Toolset.Cqrs.Messaging.SystemEventHandlerExceptionInfo})">
            <summary>
            Handles the fauled event.
            </summary>
            <param name="event">The event instance.</param>
            <param name="exceptions">The exceptions.</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Messaging.IHostConfiguration">
            <summary>
            Defines the interface for a fluent class structure to configure a messaging host.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Messaging.IHostConfiguration.Subscribe``1(System.String,System.Action{DimensionData.Toolset.Cqrs.Messaging.ISubscriptionConfiguration{``0}})">
            <summary>
            Configures the subscription for a particular event type and queue.
            </summary>
            <typeparam name="TSystemEvent">The type of the event.</typeparam>
            <param name="queueName">Name of the receiver queue.</param>
            <param name="subscriptionConfigurator">An action to configure the subscription.</param>
            <returns>The current instance of <see cref="T:DimensionData.Toolset.Cqrs.Messaging.IHostConfiguration"/>.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Messaging.ISubscriptionConfiguration`1">
            <summary>
            Defines the interface for a fluent class structure to configure event subscriptions.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Messaging.ISubscriptionConfiguration`1.AddHandler``1">
            <summary>
            Adds a handler for the event.
            </summary>
            <typeparam name="TEventHandler">The type of the event handler.</typeparam>
            <returns>The current instance of <see cref="T:DimensionData.Toolset.Cqrs.Messaging.ISubscriptionConfiguration`1"/>.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Messaging.ISubscriptionConfiguration`1.AddFaultHandler``1">
            <summary>
            Adds a handler for the event if it fails processing the configured maximum number of times.
            </summary>
            <typeparam name="TFaultEventHandler">The type of the fault event handler.</typeparam>
            <returns>The current instance of <see cref="T:DimensionData.Toolset.Cqrs.Messaging.ISubscriptionConfiguration`1"/>.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Messaging.ISubscriptionConfiguration`1.RetryImmediate(System.Int32)">
            <summary>
            Create an immediate retry policy with the specified number of retries, with no delay between attempts.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <returns>The current instance of <see cref="T:DimensionData.Toolset.Cqrs.Messaging.ISubscriptionConfiguration`1" />.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Messaging.ISubscriptionConfiguration`1.RetryInterval(System.Int32,System.TimeSpan)">
            <summary>
            Create an interval retry policy with the specified number of retries at a fixed interval.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="interval">The interval between each retry attempt.</param>
            <returns>The current instance of <see cref="T:DimensionData.Toolset.Cqrs.Messaging.ISubscriptionConfiguration`1" />.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Messaging.ISubscriptionConfiguration`1.RetryIncremental(System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an incremental retry policy with the specified number of retry attempts
            with an incrementing interval between retries.
            </summary>
            <param name="retryLimit">The number of retry attempts.</param>
            <param name="initialInterval">The initial retry interval.</param>
            <param name="intervalIncrement">The interval to add to the retry interval with each subsequent retry.</param>
            <returns>The current instance of <see cref="T:DimensionData.Toolset.Cqrs.Messaging.ISubscriptionConfiguration`1" />.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Messaging.ISubscriptionConfiguration`1.RetryExponential(System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an exponential retry policy with the specified number of retries at exponential interval.
            </summary>
            <param name="retryLimit">The number of retry attempts.</param>
            <param name="minInterval">The minimum interval.</param>
            <param name="maxInterval">The maximum interval.</param>
            <param name="intervalDelta">The interval delta.</param>
            <returns>The current instance of <see cref="T:DimensionData.Toolset.Cqrs.Messaging.ISubscriptionConfiguration`1" />.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Security.AuthorizationManager`1">
            <summary>
                Default implementation of <see cref="T:DimensionData.Toolset.Cqrs.Security.IAuthorizationManager`1"/>
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Security.AuthorizationManager`1.#ctor(DimensionData.Toolset.DependencyInjection.IDependencyContainer)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Cqrs.Security.AuthorizationManager`1"/> class.
            </summary>
            <param name="container">The dependency injection container.</param>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Security.AuthorizationManager`1.Authorize(`0)">
            <summary>
                Authorizes the specified message.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.Security.SecurityException">Authorization for the message failed.</exception>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Security.IAuthorizationManager`1">
            <summary>
                Defines the contract for a manager providing authorization checks for authenticated messages.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Security.IAuthorizationManager`1.Authorize(`0)">
            <summary>
                Authorizes the specified message.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.Security.SecurityException">Authorization for the message failed.</exception>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.Security.IAuthorizationRule`1">
            <summary>
                Defines the contract for an authorization test for an authenticated user trying to execute an operation.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
        </member>
        <member name="P:DimensionData.Toolset.Cqrs.Security.IAuthorizationRule`1.ErrorText">
            <summary>
                Gets the error text.
            </summary>
            <value>The error text.</value>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.Security.IAuthorizationRule`1.IsAuthorized(`0)">
            <summary>
                Determines whether the specified message execution is authorized.
            </summary>
            <param name="message">The message.</param>
            <returns><c>true</c> if the specified message execution is authorized; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.IQueryProcessor">
            <summary>
                Defines the contract for a query router.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.IQueryProcessor.ProcessQuery``2(``0)">
            <summary>
                Processes the query.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">The query.</param>
            <returns>The relevant query response.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.ICommandBus">
            <summary>
                The contract defined the router of commands to command handlers
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.ICommandBus.Send``1(``0)">
            <summary>
                Routes the specified command to the relevant command handler.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="command">The command to be routed.</param>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.ICommandHandler`1">
            <summary>
                Defined the contract for a command handler as specified in the CQRS pattern.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.ICommandHandler`1.Handle(`0)">
            <summary>
                Handles the specified command.
            </summary>
            <param name="command">The command to be handled.</param>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.IQuery`1">
            <summary>
                Defines a contract for any query sent throughout the system as specified in the CQRS pattern.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.IQueryHandler`2">
            <summary>
                Defines the contract for a query router.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TResult">The type of the query response.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Cqrs.IQueryHandler`2.Read(`0)">
            <summary>
                Processes the query.
            </summary>
            <param name="query">The query to be processed.</param>
            <returns>The relevant query response.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Cqrs.PagedQueryResponse`1">
            <summary>
                A default implementation of <see cref="T:DimensionData.Toolset.Querying.IQueryResult`1" />.
            </summary>
            <typeparam name="TResult">The type of the result item.</typeparam>
        </member>
        <member name="P:DimensionData.Toolset.Cqrs.PagedQueryResponse`1.Skip">
            <summary>
                Gets or sets the number of items that have been skipped.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Cqrs.PagedQueryResponse`1.Take">
            <summary>
                Gets or sets the number of items that have been requested.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Cqrs.PagedQueryResponse`1.TotalCount">
            <summary>
                Gets or sets the total item count in case only a page is returned.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Cqrs.PagedQueryResponse`1.Items">
            <summary>
                Gets or sets the result items.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Data.SqlServer.ExceptionHelpers">
            <summary>
                Provides helper methods to deal with SQL Server exception.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Data.SqlServer.ExceptionHelpers.CatchSqlErrorNumber(System.Func{System.Threading.Tasks.Task},System.Int32)">
            <summary>
                Tries to perform the supplied action while catching exceptions with the supplied error numebr.
            </summary>
            <param name="action">The action to invoke.</param>
            <param name="number">The error number to catych.</param>
            <returns>True if the action was successful; False if the expected error occured.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Data.SqlServer.ExceptionHelpers.CatchUniqueIndexViolationError(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Tries to perform the supplied action while catching unique index violation errors.
            </summary>
            <param name="action">The action to invoke.</param>
            <returns>True if the action was successful; False if the action caused a unique constraint violation.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Data.SqlServer.ExceptionHelpers.ExtractSqlException(System.Exception)">
            <summary>
                Extracts the SQL exception from the inner exception chain.
            </summary>
            <param name="exception">The original exception.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">SqlException not found in exception chain.</exception>
        </member>
        <member name="T:DimensionData.Toolset.Data.SqlServer.SqlExceptionExtensions">
            <summary>
                Provides commonly used extension methods for the <see cref="T:System.Data.SqlClient.SqlException" /> class.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Data.SqlServer.SqlExceptionExtensions.IsUniqueConstraintException(System.Data.SqlClient.SqlException)">
            <summary>
                Determines whether the exception is a unique constraint exception.
            </summary>
            <param name="sqlException">The SQL exception.</param>
            <returns><c>true</c> if the exception is a unique constraint exception; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Data.SqlServer.SqlExceptionExtensions.IsForeignKeyException(System.Data.SqlClient.SqlException)">
            <summary>
                Determines whether exception is a foreign key violation exception.
            </summary>
            <param name="sqlException">The SQL exception.</param>
            <returns><c>true</c> if the exception is a foreign key violation exception; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Data.SqlServer.SqlParameterCollection">
            <summary>
                A helper class to simplify creation of <see cref="T:System.Data.SqlClient.SqlParameter"/> collections.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Data.SqlServer.SqlParameterCollection.AddParameter(System.String,System.Object,System.Data.SqlDbType,System.Data.ParameterDirection)">
            <summary>
                Adds the parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
            <param name="parameterType">Type of the parameter.</param>
            <param name="parameterDirection">The parameter direction.</param>
        </member>
        <member name="M:DimensionData.Toolset.Data.SqlServer.SqlParameterCollection.AddParameter(System.String,System.Object,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
                Adds the parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
            <param name="parameterType">Type of the parameter.</param>
            <param name="size">Size of the parameter.</param>
            <param name="parameterDirection">The parameter direction.</param>
        </member>
        <member name="M:DimensionData.Toolset.Data.SqlServer.SqlParameterCollection.AddOutputParameter(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
                Adds the output parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterType">Type of the parameter.</param>
            <param name="value">The optional value of the output parameter.</param>
        </member>
        <member name="M:DimensionData.Toolset.Data.SqlServer.SqlParameterCollection.AddParameter(System.String,System.Object,System.Data.SqlDbType,System.Int32)">
            <summary>
                Adds the parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
            <param name="parameterType">Type of the parameter.</param>
            <param name="size">Size of the parameter.</param>
        </member>
        <member name="M:DimensionData.Toolset.Data.SqlServer.SqlParameterCollection.AddParameter(System.String,System.Object,System.Data.SqlDbType)">
            <summary>
                Adds the parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
            <param name="parameterType">Type of the parameter.</param>
        </member>
        <member name="T:DimensionData.Toolset.Data.TransientStrategies.NetworkConnectivityErrorDetectionStrategy">
            <summary>
                An implementation of <see cref="T:DimensionData.Toolset.TransientFaultHandling.ITransientExceptionStrategy"/> that detects SQL Server network connectivity faults.
            </summary>
            <seealso cref="T:DimensionData.Toolset.TransientFaultHandling.ITransientExceptionStrategy" />
        </member>
        <member name="M:DimensionData.Toolset.Data.TransientStrategies.NetworkConnectivityErrorDetectionStrategy.IsTransient(System.Exception)">
            <summary>
                Determines whether the specified exception is transient.
            </summary>
            <param name="exception">The exception.</param>
            <returns><c>true</c> if the specified exception is transient; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Data.TransientStrategies.SqlTransientExceptionStrategy">
            <summary>
                An implementation of <see cref="T:DimensionData.Toolset.TransientFaultHandling.ITransientExceptionStrategy"/> for common SQL Server errors.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Data.TransientStrategies.SqlTransientExceptionStrategy.IsTransient(System.Exception)">
            <summary>
                Determines whether the specified <see cref="T:System.Exception" /> is transient.
            </summary>
            <remarks>
                <para>Usually used with Sql Azure. Sql Error numbers checked are:</para>
                <list type="table">
                    <listheader>
                        <term>Error_Number</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>11001</term>
                        <description>
                            A network-related or instance-specific error occurred while establishing a connection to SQL Server.
                            The server was not found or was not accessible. Verify that the instance name is correct and that SQL
                            Server is configured to allow remote connections. (provider: TCP Provider, error: 0 - No such host is
                            known.)
                        </description>
                    </item>
                    <item>
                        <term>40501</term>
                        <description>The service is currently busy. Retry the request after 10 seconds.</description>
                    </item>
                    <item>
                        <term>10928</term>
                        <description>The limit for the database has been reached.</description>
                    </item>
                    <item>
                        <term>10929</term>
                        <description>
                            The server is currently too busy to support the minimum guarantee of requests for this
                            database.
                        </description>
                    </item>
                    <item>
                        <term>10053</term>
                        <description>
                            A transport-level error has occurred when receiving results from the server.
                            An established connection was aborted by the software in your host machine.
                        </description>
                    </item>
                    <item>
                        <term>10054</term>
                        <description>
                            A transport-level error has occurred when sending the request to the server.
                            (provider: TCP Provider, error: 0 - An existing connection was forcibly closed by the remote host.)
                        </description>
                    </item>
                    <item>
                        <term>10060</term>
                        <description>
                            A network-related or instance-specific error occurred while establishing a connection to SQL Server.
                            The server was not found or was not accessible. Verify that the instance name is correct and that SQL
                            Server
                            is configured to allow remote connections. (provider: TCP Provider, error: 0 - A connection attempt
                            failed
                            because the connected party did not properly respond after a period of time, or established connection
                            failed
                            because connected host has failed to respond.)"
                        </description>
                    </item>
                    <item>
                        <term>10060</term>
                        <description>The service has encountered an error processing your request. Please try again.</description>
                    </item>
                    <item>
                        <term>40540</term>
                        <description>The service has encountered an error processing your request. Please try again.</description>
                    </item>
                    <item>
                        <term>40613</term>
                        <description>
                            Database is not currently available. Please retry the connection later. If the problem persists,
                            contact customer
                            support, and provide them the session tracing ID.
                        </description>
                    </item>
                    <item>
                        <term>40143</term>
                        <description>The service has encountered an error processing your request. Please try again.</description>
                    </item>
                    <item>
                        <term>233</term>
                        <description>
                            The client was unable to establish a connection because of an error during connection initialization
                            process before login.
                            Possible causes include the following: the client tried to connect to an unsupported version of SQL
                            Server; the server was too busy
                            to accept new connections; or there was a resource limitation (insufficient memory or maximum allowed
                            connections) on the server.
                            (provider: TCP Provider, error: 0 - An existing connection was forcibly closed by the remote host.)
                        </description>
                    </item>
                    <item>
                        <term>64</term>
                        <description>
                            A connection was successfully established with the server, but then an error occurred during
                            the login process.
                        </description>
                    </item>
                    <item>
                        <term>20</term>
                        <description>The instance of SQL Server you attempted to connect to does not support encryption.</description>
                    </item>
                </list>
                <para></para>
            </remarks>
            <param name="exception">The <see cref="T:System.Exception" /> instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Exception" /> is transient; otherwise, <c>false</c>.
            </returns>
            <sqlException cref="T:System.ArgumentNullException">Thrown when the <paramref name="exception" /> is null. </sqlException>
        </member>
        <member name="T:DimensionData.Toolset.Data.TransientStrategies.ThrottledResourceType">
            <summary>
                Defines the types of resources in SQL Database that may be subject to throttling conditions.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottledResourceType.PhysicalDatabaseSpace">
            <summary>
                Corresponds to the "Physical Database Space" resource, which may be subject to throttling.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottledResourceType.PhysicalLogSpace">
            <summary>
                Corresponds to the "Physical Log File Space" resource, which may be subject to throttling.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottledResourceType.LogWriteIoDelay">
            <summary>
                Corresponds to the "Transaction Log Write IO Delay" resource, which may be subject to throttling.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottledResourceType.DataReadIoDelay">
            <summary>
                Corresponds to the "Database Read IO Delay" resource, which may be subject to throttling.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottledResourceType.Cpu">
            <summary>
                Corresponds to the "CPU" resource, which may be subject to throttling.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottledResourceType.DatabaseSize">
            <summary>
                Corresponds to the "Database Size" resource, which may be subject to throttling.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottledResourceType.WorkerThreads">
            <summary>
                Corresponds to the "SQL Worker Thread Pool" resource, which may be subject to throttling.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottledResourceType.Internal">
            <summary>
                Corresponds to an internal resource that may be subject to throttling.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottledResourceType.Unknown">
            <summary>
                Corresponds to an unknown resource type in the event that the actual resource cannot be determined with certainty.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition">
            <summary>
                Implements an object that holds the decoded reason code returned from SQL Database when throttling conditions are
                encountered.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition.ThrottlingErrorNumber">
            <summary>
                Gets the error number that corresponds to the throttling conditions reported by SQL Database.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition.SqlErrorCodeRegEx">
            <summary>
                Provides a compiled regular expression used to extract the reason code from the error message.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition._throttledResources">
            <summary>
                Maintains a collection of key/value pairs where a key is the resource type and a value is the type of throttling
                applied to the given resource type.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition.Unknown">
            <summary>
                Gets an unknown throttling condition in the event that the actual throttling condition cannot be determined.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition.ThrottlingMode">
            <summary>
                Gets the value that reflects the throttling mode in SQL Database.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition.ThrottledResources">
            <summary>
                Gets a list of the resources in the SQL Database that were subject to throttling conditions.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition.IsThrottledOnDataSpace">
            <summary>
                Gets a value that indicates whether physical data file space throttling was reported by SQL Database.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition.IsThrottledOnLogSpace">
            <summary>
                Gets a value that indicates whether physical log space throttling was reported by SQL Database.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition.IsThrottledOnLogWrite">
            <summary>
                Gets a value that indicates whether transaction activity throttling was reported by SQL Database.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition.IsThrottledOnDataRead">
            <summary>
                Gets a value that indicates whether data read activity throttling was reported by SQL Database.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition.IsThrottledOnCpu">
            <summary>
                Gets a value that indicates whether CPU throttling was reported by SQL Database.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition.IsThrottledOnDatabaseSize">
            <summary>
                Gets a value that indicates whether database size throttling was reported by SQL Database.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition.IsThrottledOnWorkerThreads">
            <summary>
                Gets a value that indicates whether concurrent requests throttling was reported by SQL Database.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition.IsUnknown">
            <summary>
                Gets a value that indicates whether throttling conditions were not determined with certainty.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition.FromException(System.Data.SqlClient.SqlException)">
            <summary>
                Determines throttling conditions from the specified SQL exception.
            </summary>
            <param name="ex">
                The <see cref="T:System.Data.SqlClient.SqlException" /> object that contains information relevant to an error returned by SQL
                Server when throttling conditions were encountered.
            </param>
            <returns>
                An instance of the object that holds the decoded reason codes returned from SQL Database when throttling
                conditions were encountered.
            </returns>
        </member>
        <member name="M:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition.FromError(System.Data.SqlClient.SqlError)">
            <summary>
                Determines the throttling conditions from the specified SQL error.
            </summary>
            <param name="error">
                The <see cref="T:System.Data.SqlClient.SqlError" /> object that contains information relevant to a warning or error
                returned by SQL Server.
            </param>
            <returns>
                An instance of the object that holds the decoded reason codes returned from SQL Database when throttling
                conditions were encountered.
            </returns>
        </member>
        <member name="M:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition.FromReasonCode(System.Int32)">
            <summary>
                Determines the throttling conditions from the specified reason code.
            </summary>
            <param name="reasonCode">
                The reason code returned by SQL Database that contains the throttling mode and the exceeded
                resource types.
            </param>
            <returns>
                An instance of the object holding the decoded reason codes returned from SQL Database when encountering
                throttling conditions.
            </returns>
        </member>
        <member name="M:DimensionData.Toolset.Data.TransientStrategies.ThrottlingCondition.ToString">
            <summary>
                Returns a textual representation of the current ThrottlingCondition object, including the information held with
                respect to throttled resources.
            </summary>
            <returns>A string that represents the current ThrottlingCondition object.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Data.TransientStrategies.ThrottlingMode">
            <summary>
                Defines the possible throttling modes in SQL Database.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottlingMode.NoThrottling">
            <summary>
                Corresponds to the "No Throttling" throttling mode, in which all SQL statements can be processed.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottlingMode.RejectUpdateInsert">
            <summary>
                Corresponds to the "Reject Update / Insert" throttling mode, in which SQL statements such as INSERT, UPDATE, CREATE
                TABLE, and CREATE INDEX are rejected.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottlingMode.RejectAllWrites">
            <summary>
                Corresponds to the "Reject All Writes" throttling mode, in which SQL statements such as INSERT, UPDATE, DELETE,
                CREATE, and DROP are rejected.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottlingMode.RejectAll">
            <summary>
                Corresponds to the "Reject All" throttling mode, in which all SQL statements are rejected.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottlingMode.Unknown">
            <summary>
                Corresponds to an unknown throttling mode whereby throttling mode cannot be determined with certainty.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Data.TransientStrategies.ThrottlingType">
            <summary>
                Defines the possible throttling types in SQL Database.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottlingType.None">
            <summary>
                Indicates that no throttling was applied to a given resource.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottlingType.Soft">
            <summary>
                Corresponds to a soft throttling type. Soft throttling is applied when machine resources such as, CPU, I/O,
                storage, and worker threads exceed
                predefined safety thresholds despite the load balancer’s best efforts.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottlingType.Hard">
            <summary>
                Corresponds to a hard throttling type. Hard throttling is applied when the machine is out of resources, for example
                storage space.
                With hard throttling, no new connections are allowed to the databases hosted on the machine until resources are
                freed up.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Data.TransientStrategies.ThrottlingType.Unknown">
            <summary>
                Corresponds to an unknown throttling type in the event that the throttling type cannot be determined with
                certainty.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.DependencyInjection.DomainEventHandlerRegistration`2">
            <summary>
            This is a helper class to register dependency injection for domain event handlers
            </summary>
            <typeparam name="TDomainEvent">The type of the domain event.</typeparam>
            <typeparam name="TDomainEventHandler">The type of the domain event handler.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.DomainEventHandlerRegistration`2.#ctor(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.DependencyInjection.DomainEventHandlerRegistration`2"/> class.
            </summary>
            <param name="containerBuilder">The container builder.</param>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.DomainEventHandlerRegistration`2.WithDecorators(System.Type[])">
            <summary>
            Register the specified list of decorators with the domain event handler of type <typeparamref name="TDomainEventHandler"/>.
            </summary>
            <param name="decoratorTypes">The decorator types.</param>
        </member>
        <member name="T:DimensionData.Toolset.DependencyInjection.CommandHandlerRegistration`2">
            <summary>
            This is a helper class to register dependency injection for command handlers
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <typeparam name="TCommandHandler">The type of the command handler.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.CommandHandlerRegistration`2.#ctor(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.DependencyInjection.CommandHandlerRegistration`2"/> class.
            </summary>
            <param name="containerBuilder">The container builder.</param>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.CommandHandlerRegistration`2.WithDecorators(System.Type[])">
            <summary>
            Register the specified list of decorators with the command handler of type <typeparamref name="TCommandHandler"/>.
            </summary>
            <param name="decoratorTypes">The decorator types.</param>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.CommandHandlerRegistration`2.WithAuthorizationRules(System.Type[])">
            <summary>
            Register the specified list of authorization rules with the command handler of type <typeparamref name="TCommandHandler"/>.
            </summary>
            <param name="authorizationRuleTypes">The authorization rule types.</param>
            <returns></returns>
        </member>
        <member name="T:DimensionData.Toolset.DependencyInjection.CqrsExtensions">
            <summary>
            Provides extension methods to register CQRS Commands, System Events and Queries.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.CqrsExtensions.RegisterCommandHandler``2(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
            Registers a command handler.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <typeparam name="TCommandHandler">The type of the command handler.</typeparam>
            <param name="builder">The dependency injection container builder.</param>
            <returns>The dependency injection container builder.</returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.CqrsExtensions.RegisterCommandDecorator``2(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
            Registers a command decorator.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <typeparam name="TDecorator">The type of the decorator.</typeparam>
            <param name="builder">The dependency injection container builder.</param>
            <returns>The dependency injection container builder.</returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.CqrsExtensions.RegisterCommandHandlerWithDecorators``2(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder,System.Type[])">
            <summary>
            Registers a command handler with decorators.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <typeparam name="TCommandHandler">The type of the command handler.</typeparam>
            <param name="builder">The dependency injection container builder.</param>
            <param name="decoratorTypes">The decorator types.</param>
            <returns>The dependency injection container builder.</returns>
            <remarks>
            The decorator types can either be concrete or open generic types.
            </remarks>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.CqrsExtensions.RegisterDomainEventHandler``2(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
            Registers a domain event handler.
            </summary>
            <typeparam name="TDomainEvent">The type of the domain event.</typeparam>
            <typeparam name="TDomainEventHandler">The type of the domain event handler.</typeparam>
            <param name="builder">The dependency injection container builder.</param>
            <returns>The dependency injection container builder.</returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.CqrsExtensions.RegisterSystemEventHandler``2(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
            Registers a system event handler.
            </summary>
            <typeparam name="TSystemEvent">The type of the system event.</typeparam>
            <typeparam name="TSystemEventHandler">The type of the system event handler.</typeparam>
            <param name="builder">The dependency injection container builder.</param>
            <returns>The dependency injection container builder.</returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.CqrsExtensions.RegisterSystemEventDecorator``2(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
            Registers a system event decorator.
            </summary>
            <typeparam name="TSystemEvent">The type of the system event.</typeparam>
            <typeparam name="TDecorator">The type of the decorator.</typeparam>
            <param name="builder">The dependency injection container builder.</param>
            <returns>The dependency injection container builder.</returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.CqrsExtensions.RegisterSystemEventHandlerWithDecorators``2(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder,System.Type[])">
            <summary>
            Registers a system event handler with decorators.
            </summary>
            <typeparam name="TSystemEvent">The type of the system event.</typeparam>
            <typeparam name="TSystemEventHandler">The type of the system event handler.</typeparam>
            <param name="builder">The dependency injection container builder.</param>
            <param name="decoratorTypes">The decorator types.</param>
            <returns>The dependency injection container builder.</returns>
            <remarks>
            The decorator types can either be concrete or open generic types.
            </remarks>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.CqrsExtensions.RegisterQueryHandler``3(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
            Registers a query handler.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TQueryHandler">The type of the query handler.</typeparam>
            <param name="builder">The dependency injection container builder.</param>
            <returns>The dependency injection container builder.</returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.CqrsExtensions.RegisterQueryDecorator``4(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
            Registers a query decorator.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TQueryHandler">The type of the query handler.</typeparam>
            <typeparam name="TDecorator">The type of the decorator.</typeparam>
            <param name="builder">The dependency injection container builder.</param>
            <returns>The dependency injection container builder.</returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.CqrsExtensions.RegisterQueryHandlerWithDecorators``3(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder,System.Type[])">
            <summary>
            Registers a query handler with decorators.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TQueryHandler">The type of the query handler.</typeparam>
            <param name="builder">The dependency injection container builder.</param>
            <param name="decoratorTypes">The decorator types.</param>
            <returns>The dependency injection container builder.</returns>
            <remarks>
            The decorator types can either be concrete or open generic types.
            </remarks>
        </member>
        <member name="T:DimensionData.Toolset.DependencyInjection.DependencyContainerBuilderExtensions">
            <summary>
                Provides commonly used extension methods for <see cref="T:DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder" /> implementations.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.DependencyContainerBuilderExtensions.Register``1(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
                Registers that a new instance of <typeparamref name="TConcrete" /> will be returned every time it
                is requested (transient).
            </summary>
            <typeparam name="TConcrete">The concrete type that will be registered.</typeparam>
            <param name="builder">The container builder instance.</param>
            <returns>The container builder instance.</returns>
            <exception cref="T:System.ArgumentException">
                Thrown when the <typeparamref name="TConcrete" /> is a type
                that can not be created by the container.
            </exception>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.DependencyContainerBuilderExtensions.Register``2(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
                Registers that a new instance of <typeparamref name="TConcrete" /> will be returned every time a
                <typeparamref name="TService" /> is requested (transient).
            </summary>
            <typeparam name="TService">The interface or base type that can be used to retrieve the instances.</typeparam>
            <typeparam name="TConcrete">The concrete type that will be registered.</typeparam>
            <param name="builder">The container builder instance.</param>
            <returns>The container builder instance.</returns>
            <exception cref="T:System.ArgumentException">
                Thrown when the given <typeparamref name="TConcrete" />
                type is not a type that can be created by the container.
            </exception>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.DependencyContainerBuilderExtensions.RegisterSingleton(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder,System.Type,System.Type)">
            <summary>
                Registers the singleton.
            </summary>
            <param name="builder">The container builder instance.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="concreteType">Type of the implementation.</param>
            <returns>The container builder instance.</returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.DependencyContainerBuilderExtensions.RegisterSingleton``1(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
                Registers a single concrete instance that will be constructed using constructor injection and will
                be returned when this instance is requested by type <typeparamref name="TConcrete" />.
                This <typeparamref name="TConcrete" /> must be thread-safe when working in a multi-threaded
                environment.
            </summary>
            <typeparam name="TConcrete">The concrete type that will be registered.</typeparam>
            <param name="builder">The container builder.</param>
            <returns>The container builder instance.</returns>
            <exception cref="T:System.ArgumentException">
                Thrown when the <typeparamref name="TConcrete" /> is a type
                that can not be created by the container.
            </exception>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.DependencyContainerBuilderExtensions.RegisterSingleton``2(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
                Registers that the same a single instance of type <typeparamref name="TConcrete" /> will be
                returned every time an <typeparamref name="TService" /> type is requested. If
                <typeparamref name="TService" /> and <typeparamref name="TConcrete" />  represent the same
                type, the type is registered by itself. <typeparamref name="TConcrete" /> must be thread-safe
                when working in a multi-threaded environment.
            </summary>
            <typeparam name="TService">The interface or base type that can be used to retrieve the instances.</typeparam>
            <typeparam name="TConcrete">The concrete type that will be registered.</typeparam>
            <param name="builder">The container builder.</param>
            <returns>The container builder instance.</returns>
            <exception cref="T:System.ArgumentException">
                Thrown when the given <typeparamref name="TConcrete" />
                type is not a type that can be created by the container.
            </exception>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.DependencyContainerBuilderExtensions.RegisterSingleton``1(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder,System.Func{``0})">
            <summary>
                Registers the specified delegate that allows constructing a single instance of
                <typeparamref name="TService" />. This delegate will be called at most once during the lifetime of
                the application. The returned instance must be thread-safe when working in a multi-threaded
                environment.
            </summary>
            <typeparam name="TService">The interface or base type that can be used to retrieve instances.</typeparam>
            <param name="builder">The builder.</param>
            <param name="factory">
                The factory delegate that allows building or creating this single
                instance.
            </param>
            <returns>The container builder instance.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="factory" /> is a
                null reference.
            </exception>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.DependencyContainerBuilderExtensions.RegisterExecutionContextScope(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder,System.Type)">
            <summary>
            Registers the type in the execution context scope.
            </summary>
            <param name="builder">The builder.</param>
            <param name="concreteType">Type of the concrete.</param>
            <returns></returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.DependencyContainerBuilderExtensions.RegisterExecutionContextScope(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder,System.Type,System.Type)">
            <summary>
            Registers the type in the execution context scope.
            </summary>
            <param name="builder">The builder.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="concreteType">Type of the concrete.</param>
            <returns></returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.DependencyContainerBuilderExtensions.RegisterExecutionContextScope``1(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder,System.Func{``0})">
            <summary>
            Registers the type in the execution context scope.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="builder">The builder.</param>
            <param name="factory">The factory.</param>
            <returns></returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.DependencyContainerBuilderExtensions.RegisterExecutionContextScope``2(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
            Registers the type in the execution context scope.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TConcrete">The type of the concrete.</typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.DependencyContainerBuilderExtensions.RegisterExecutionContextScope``1(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
            Registers the type in the execution context scope.
            </summary>
            <typeparam name="TConcrete">The type of the concrete.</typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.DependencyContainerBuilderExtensions.AppendToCollection``2(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
                Allows appending new registrations to existing registrations made using one of the
                overloads.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TConcrete">The concrete type (implementation) of the service.</typeparam>
            <returns>IDependencyContainerBuilder.</returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.DependencyContainerBuilderExtensions.LoadModule``1(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
                Loads a module by incorporating the registrations in the module into the builder and the container when built.
            </summary>
            <typeparam name="TModule">The type of the module.</typeparam>
        </member>
        <member name="T:DimensionData.Toolset.DependencyInjection.DependencyLifestyle">
            <summary>
            Defines the lifestyle of a component registration.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.DependencyInjection.DependencyLifestyle.Transient">
            <summary>
            A new instance of the component will be instantiated for every request.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.DependencyInjection.DependencyLifestyle.Singleton">
            <summary>
            Only one single instance of the component will be instantiated for the entire application.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.DependencyInjection.DependencyLifestyle.Scoped">
            <summary>
            A single instance of the component will be instantiated per scope (i.e. a single request).
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.DependencyInjection.IScopeProvider">
            <summary>
                Interface defining contract for an injection scope provider.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IScopeProvider.ProvideScope(DimensionData.Toolset.DependencyInjection.IDependencyContainer)">
            <summary>
                Provides the scope.
            </summary>
            <returns>Provides an instance of a specific scope.</returns>
        </member>
        <member name="T:DimensionData.Toolset.DependencyInjection.IScopeRegistrar">
            <summary>
                Interface defining contract for a scope registrar.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IScopeRegistrar.Register(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder,System.Type)">
            <summary>
                Registers a concrete type.
            </summary>
            <param name="builder">The container builder instance.</param>
            <param name="concreteType">Type of the concrete type.</param>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IScopeRegistrar.Register(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder,System.Type,System.Type)">
            <summary>
            Registers the concrete type with a service type.
            </summary>
            <param name="builder">The container builder instance.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="concreteType">Type of the concrete.</param>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IScopeRegistrar.Register``1(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder,System.Func{``0})">
            <summary>
            Registers a service with instantiation factory.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="builder">The container builder instance.</param>
            <param name="factory">The instantiation factory.</param>
        </member>
        <member name="T:DimensionData.Toolset.DependencyInjection.QueryHandlerRegistration`3">
            <summary>
            This is a helper class to register dependency injection for query handlers
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TResult">The type of the query result.</typeparam>
            <typeparam name="TQueryHandler">The type of the query handler</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.QueryHandlerRegistration`3.#ctor(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.DependencyInjection.QueryHandlerRegistration`3"/> class.
            </summary>
            <param name="containerBuilder">The container builder.</param>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.QueryHandlerRegistration`3.WithDecorators(System.Type[])">
            <summary>
            Register the specified list of decorators with the command handler of type <typeparamref name="TResult"/>.
            </summary>
            <param name="decoratorTypes">The decorator types.</param>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.QueryHandlerRegistration`3.WithAuthorizationRules(System.Type[])">
            <summary>
            Register the specified list of authorization rules with the command handler of type <typeparamref name="TResult"/>.
            </summary>
            <param name="authorizationRuleTypes">The authorization rule types.</param>
            <returns></returns>
        </member>
        <member name="T:DimensionData.Toolset.DependencyInjection.IDependencyContainer">
            <summary>
                Interface defining generic common contract for inversion of control containers.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IDependencyContainer.GetInstance``1">
            <summary>Gets an instance of the given <typeparamref name="TService" />.</summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IDependencyContainer.GetInstance(System.Type)">
            <summary>Gets an instance of the given <paramref name="serviceType" />.</summary>
            <param name="serviceType">Type of object requested.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IDependencyContainer.GetAllInstances``1">
            <summary>
                Gets all instances of the given <typeparamref name="TService" /> currently registered in the container.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <returns>A sequence of instances of the requested TService.</returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IDependencyContainer.GetAllInstances(System.Type)">
            <summary>
                Gets all instances of the given <paramref name="serviceType" /> currently registered in the container.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <returns>A sequence of instances of the requested serviceType.</returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IDependencyContainer.TryGetInstance``1">
            <summary>
                Tries to resolve a service from the container.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns><c>true</c> if service has been resolved successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IDependencyContainer.BeginScope(DimensionData.Toolset.DependencyInjection.IScopeProvider)">
            <summary>
                Activated the scope provided by the scope provider.
            </summary>
            <param name="scopeProvider">The scope provider.</param>
            <returns>The <see cref="T:System.IDisposable"/> to be used to close the scope.</returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IDependencyContainer.BeginExecutionScope">
            <summary>
                Activated a new execution scope.
            </summary>
            <returns>The <see cref="T:System.IDisposable"/> to be used to close the scope.</returns>
        </member>
        <member name="T:DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder">
            <summary>
                Defines the builder operations to build an inversion of control container.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder.Register(System.Type,DimensionData.Toolset.DependencyInjection.DependencyLifestyle,DimensionData.Toolset.DependencyInjection.IScopeRegistrar)">
            <summary>
                Registers that a new instance of <paramref name="concreteType" /> will be returned every time it
                is requested (transient).
            </summary>
            <param name="concreteType">The concrete type that will be registered.</param>
            <param name="dependencyLifestyle">The dependency lifetime.</param>
            <param name="scopeRegistrar">The scope registrar.</param>
            <returns>Instance of the container builder.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="concreteType" /> is a null
                references.
            </exception>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder.Register(System.Type,System.Type,DimensionData.Toolset.DependencyInjection.DependencyLifestyle,DimensionData.Toolset.DependencyInjection.IScopeRegistrar)">
            <summary>
                Registers that a new instance of <paramref name="concreteType" /> will be returned every time a
                <paramref name="serviceType" /> is requested. If <paramref name="serviceType" /> and
                <paramref name="concreteType" /> represent the same type, the type is registered by itself.
            </summary>
            <param name="serviceType">The base type or interface to register.</param>
            <param name="concreteType">The actual type that will be returned when requested.</param>
            <param name="dependencyLifestyle">The dependency lifetime.</param>
            <param name="scopeRegistrar">The scope registrar.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="serviceType" /> or
                <paramref name="concreteType" /> are null references (Nothing in VB).
            </exception>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder.Register``1(System.Func{``0},DimensionData.Toolset.DependencyInjection.DependencyLifestyle,DimensionData.Toolset.DependencyInjection.IScopeRegistrar)">
            <summary>
                Registers the specified delegate that allows returning transient instances of
                <typeparamref name="TService" />. The delegate is expected to always return a new instance on
                each call.
            </summary>
            <typeparam name="TService">The interface or base type that can be used to retrieve instances.</typeparam>
            <param name="factory">The factory delegate that allows building or creating new instances.</param>
            <param name="dependencyLifestyle">The dependency lifetime.</param>
            <param name="scopeRegistrar">The scope registrar.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="factory" /> is a null reference.</exception>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder.RegisterInstance(System.Type,System.Object)">
            <summary>
                Registers the instance as a singleton.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceInstance">The service type instance.</param>
            <returns>The <see cref="T:DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder" />.</returns>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder.RegisterAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Registers all the implementing concrete types for the specified service type.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="concreteTypes">The concrete types.</param>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder.RegisterDecorator(System.Type,System.Type,DimensionData.Toolset.DependencyInjection.DependencyLifestyle)">
            <summary>
                Ensures that the supplied <paramref name="decoratorType" /> decorator is returned, wrapping the
                original registered <paramref name="serviceType" />, by injecting that service type into the
                constructor of the supplied <paramref name="decoratorType" />. Multiple decorators may be applied
                to the same <paramref name="serviceType" />. Decorators can be applied to both open, closed, and
                non-generic service types.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="decoratorType">Type of the decorator.</param>
            <param name="dependencyLifestyle">The DependencyLifestyle.</param>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder.AppendToCollection(System.Type,System.Type)">
            <summary>
                Allows appending new registrations to existing registrations made using one of the
                overloads.
            </summary>
            <param name="serviceType">The base type or interface to register.</param>
            <param name="concreteType">The concrete type that will be registered.</param>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder.Build">
            <summary>
                Builds an instance of the <see cref="T:DimensionData.Toolset.DependencyInjection.IDependencyContainer" /> based on supplied registrations.
            </summary>
            <returns>The <see cref="T:DimensionData.Toolset.DependencyInjection.IDependencyContainer" /> instance.</returns>
        </member>
        <member name="T:DimensionData.Toolset.DependencyInjection.IModule">
            <summary>
                Represents an application module. The module class is responsible for registering the correct service definitions
                and their implementation in each application module.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.DependencyInjection.IModule.Initialize(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
                Initializes the current module instance into a specified container builder.
            </summary>
            <param name="builder">The dependency injection container builder.</param>
        </member>
        <member name="T:DimensionData.Toolset.Diagnostics.ExceptionExtensions">
            <summary>
                Extension methods for adding and getting activity correlation identifiers to and from exceptions.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Diagnostics.ExceptionExtensions.ActivityIdExceptionDataKey">
            <summary>
                The key used to store the current activity in <see cref="T:System.Exception" />.<see cref="P:System.Exception.Data" />.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Diagnostics.ExceptionExtensions.CaptureCurrentActivityId(System.Exception)">
            <summary>
                Capture the current activity Id (if any), and add it to the specified <see cref="T:System.Exception" />'s
                <see cref="P:System.Exception.Data">custom property dictionary</see>.
            </summary>
            <param name="exception">
                The exception to add the current activity Id to.
            </param>
            <returns>
                The <paramref name="exception" /> (enables method-chaining / inline use).
            </returns>
        </member>
        <member name="M:DimensionData.Toolset.Diagnostics.ExceptionExtensions.GetCapturedActivityId(System.Exception)">
            <summary>
                Capture the current activity Id (if any), and add it to the specified <see cref="T:System.Exception" />'s
                <see cref="P:System.Exception.Data">custom property dictionary</see>.
            </summary>
            <param name="exception">
                The exception to add the current activity Id to.
            </param>
            <returns>
                A <see cref="T:System.Nullable`1" /> <see cref="T:System.Guid" /> representing the captured activity Id (<c>null</c>, if no captured
                activity Id is present in the exception's custom data).
            </returns>
        </member>
        <member name="T:DimensionData.Toolset.Diagnostics.ActivityScope">
            <summary>
                Represents a scope for an activity.
            </summary>
            <remarks>
                When the scope is disposed, the previous activity Id (if any) will be restored.
            </remarks>
            <seealso cref="T:DimensionData.Toolset.Diagnostics.ActivityCorrelationManager" />
            .
        </member>
        <member name="F:DimensionData.Toolset.Diagnostics.ActivityScope._activityId">
            <summary>
                The current activity Id (if any).
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Diagnostics.ActivityScope._previousActivityId">
            <summary>
                The previous activity Id (if any).
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Diagnostics.ActivityScope.#ctor(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
                Create a new activity scope.
            </summary>
            <param name="activityId">
                The current activity Id (if any).
            </param>
            <param name="previousActivityId">
                The previous activity Id (if any).
            </param>
        </member>
        <member name="P:DimensionData.Toolset.Diagnostics.ActivityScope.ActivityId">
            <summary>
                The current activity Id (if any).
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Diagnostics.ActivityScope.PreviousActivityId">
            <summary>
                The previous activity Id (if any).
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Diagnostics.ActivityScope.Disposing">
            <summary>
                Dispose of resources being used by the object.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Diagnostics.ActivityCorrelationManager">
            <summary>
                Handles activity correlation in an <c>async</c>/<c>await</c>-friendly manner.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Diagnostics.ActivityCorrelationManager.CurrentActivityIdInternal">
            <summary>
                The current activity id.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Diagnostics.ActivityCorrelationManager.SystemCorrelationManager">
            <summary>
                The System.Diagnostics correlation manager.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Diagnostics.ActivityCorrelationManager.CurrentActivityId">
            <summary>
                Get the current activity Id (if any).
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Diagnostics.ActivityCorrelationManager.BeginActivityScope(System.Nullable{System.Guid})">
            <summary>
                Create an activity scope.
            </summary>
            <param name="activityId">
                An optional specific activity Id to use.
                If not specified, a new activity Id is generated.
            </param>
            <returns>
                The new activity scope.
            </returns>
            <remarks>
                When the scope is disposed, the previous activity Id (if any) will be restored.
            </remarks>
        </member>
        <member name="M:DimensionData.Toolset.Diagnostics.ActivityCorrelationManager.RequireActivityScope">
            <summary>
                Create an activity scope that ensures a that there is a current activity.
            </summary>
            <returns>
                The new activity scope.
            </returns>
            <remarks>
                If there is already an ambient activity, the scope will maintain it.
                When the scope is disposed, the previous activity Id (if any) will be restored.
            </remarks>
        </member>
        <member name="M:DimensionData.Toolset.Diagnostics.ActivityCorrelationManager.BeginSuppressActivityScope">
            <summary>
                Create a new activity scope that suppresses the ambient activity.
            </summary>
            <returns>
                The new activity scope.
            </returns>
            <remarks>
                When the scope is disposed, the previous activity Id (if any) will be restored.
            </remarks>
        </member>
        <member name="M:DimensionData.Toolset.Diagnostics.ActivityCorrelationManager.SetCurrentActivityId(System.Guid)">
            <summary>
                Set the current activity Id.
            </summary>
            <param name="activityId">
                The activity Id.
            </param>
        </member>
        <member name="M:DimensionData.Toolset.Diagnostics.ActivityCorrelationManager.ClearCurrentActivityId">
            <summary>
                Clear the current activity Id.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Diagnostics.ActivityCorrelationManager.SynchronizeEventSourceActivityIds(DimensionData.Toolset.Diagnostics.CorrelationSource)">
            <summary>
                Update event source activity Ids with the current activity Id (if one is currently set).
            </summary>
            <param name="correlationSource">
                A <see cref="T:DimensionData.Toolset.Diagnostics.CorrelationSource" /> value representing the source of activity-correlation information.
                Default is <see cref="F:DimensionData.Toolset.Diagnostics.CorrelationSource.Application" />.
            </param>
        </member>
        <member name="T:DimensionData.Toolset.Diagnostics.CorrelationSource">
            <summary>
                Represents a source of activity correlation information.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Diagnostics.CorrelationSource.Unknown">
            <summary>
                The source of activity-correlation information is unknown.
            </summary>
            <remarks>
                Used to detect uninitialized values; do not use directly.
            </remarks>
        </member>
        <member name="F:DimensionData.Toolset.Diagnostics.CorrelationSource.Application">
            <summary>
                Activity-correlation information comes from the application.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Diagnostics.CorrelationSource.EventSource">
            <summary>
                Activity-correlation information comes from <see cref="F:DimensionData.Toolset.Diagnostics.CorrelationSource.EventSource">ETW</see>'s
                <see cref="P:System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId" />.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Domain.DependencyInjectionDomainEventBus">
            <summary>
            A default implementation of <see cref="T:DimensionData.Toolset.Domain.IDomainEventBus"/> using <see cref="T:DimensionData.Toolset.DependencyInjection.IDependencyContainer"/> to resolve the handlers for a domain event.
            </summary>
            <seealso cref="T:DimensionData.Toolset.Domain.IDomainEventBus" />
        </member>
        <member name="M:DimensionData.Toolset.Domain.DependencyInjectionDomainEventBus.#ctor(DimensionData.Toolset.DependencyInjection.IDependencyContainer)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Domain.DependencyInjectionDomainEventBus"/> class.
            </summary>
            <param name="container">The dependency injection container.</param>
        </member>
        <member name="M:DimensionData.Toolset.Domain.DependencyInjectionDomainEventBus.Publish``1(``0)">
            <summary>
                Publishes the specified event. Delivers the event to the registered event handler.
            </summary>
            <typeparam name="TDomainEvent">The type of the event.</typeparam>
            <param name="event">The event.</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Domain.IDomainEvent">
            <summary>
                Defines the structure of a domain event. Used for event sourced events.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Domain.IDomainEventBus">
            <summary>
                Represents a generic event bus.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Domain.IDomainEventBus.Publish``1(``0)">
            <summary>
                Publishes the specified event. Delivers the event to the registered event handler.
            </summary>
            <typeparam name="TDomainEvent">The type of the event.</typeparam>
            <param name="event">The event.</param>
        </member>
        <member name="T:DimensionData.Toolset.Domain.IDomainEventHandler`1">
            <summary>
                Represents a generic event handler.
            </summary>
            <typeparam name="TDomainEvent">The type of the event.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Domain.IDomainEventHandler`1.Handle(`0)">
            <summary>
                Handles the specified event.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="T:DimensionData.Toolset.Domain.ITrackedEntity`2">
            <summary>
                An extended <see cref="T:DimensionData.Toolset.Domain.IEntity`1"/> interface with additional metadata and change tracking information.
            </summary>
            <typeparam name="TId">The type of the identifier.</typeparam>
            <typeparam name="TVersionType">The type of the version type.</typeparam>
        </member>
        <member name="P:DimensionData.Toolset.Domain.ITrackedEntity`2.CreatedOnUtc">
            <summary>
                Gets the created on UTC.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Domain.ITrackedEntity`2.ModifiedOnUtc">
            <summary>
                Gets the modified on UTC.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Domain.ITrackedEntity`2.ChangeLog">
            <summary>
                Gets the change log.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Domain.ITrackedEntity`2.IsTracking">
            <summary>
                Gets a value indicating whether this instance is tracking.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Domain.ITrackedEntity`2.HasChanges">
            <summary>
                Gets a value indicating whether this instance has changes.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Domain.ITrackedEntity`2.Version">
            <summary>
                Gets the version.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Domain.ITrackedEntity`2.StartTracking">
            <summary>
                Starts the tracking.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Domain.ITrackedEntity`2.StopTracking">
            <summary>
                Stops the tracking.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Domain.TrackedEntity`2">
            <summary>
                Represents the base class for entities that need to track changes.
            </summary>
            <typeparam name="TId">The type of the entity identifier.</typeparam>
            <typeparam name="TVersionType">The type of the version property.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Domain.TrackedEntity`2.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Domain.TrackedEntity`2"/> class.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Domain.TrackedEntity`2.ChangeLog">
            <summary>
                Gets or sets the change log.
            </summary>
            <value>The change log.</value>
        </member>
        <member name="P:DimensionData.Toolset.Domain.TrackedEntity`2.IsTracking">
            <summary>
                Gets or sets a value indicating whether this instance is tracking changes.
            </summary>
            <value><c>true</c> if this instance is tracking changes; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DimensionData.Toolset.Domain.TrackedEntity`2.HasChanges">
            <summary>
                Gets a value indicating whether this instance has changes.
            </summary>
            <value><c>true</c> if this instance has changes; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DimensionData.Toolset.Domain.TrackedEntity`2.CreatedOnUtc">
            <summary>
                Gets or sets the created time in UTC.
            </summary>
            <value>The created time in UTC.</value>
        </member>
        <member name="P:DimensionData.Toolset.Domain.TrackedEntity`2.ModifiedOnUtc">
            <summary>
                Gets or sets the modified time in UTC.
            </summary>
            <value>The modified time in UTC.</value>
        </member>
        <member name="M:DimensionData.Toolset.Domain.TrackedEntity`2.StartTracking">
            <summary>
                Starts change tracking on this entity.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Domain.TrackedEntity`2.StopTracking">
            <summary>
                Stops the change tracking.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Domain.TrackedEntity`2.Version">
            <summary>
                Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="M:DimensionData.Toolset.Domain.TrackedEntity`2.SetField``1(``0@,``0,System.String)">
            <summary>
                Sets the field values while tracking changes if change tracking is enabled.
            </summary>
            <typeparam name="TFieldType">The type of the field.</typeparam>
            <param name="field">The field to set.</param>
            <param name="value">The value to set.</param>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if the property is set to a new value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Domain.TrackedEntity`2.SetValueObjectField``1(``0@,``0,System.String)">
            <summary>
                Sets a value object field while tracking changes if change tracking is enabled.
            </summary>
            <typeparam name="TValueObject">The type of the value object.</typeparam>
            <param name="field">The field to set.</param>
            <param name="value">The value to set.</param>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if the property is set to a new value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Domain.TrackedEntity`2.OnStartTracking">
            <summary>
                Called when change tracking is activated.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Domain.TrackedEntity`2.OnStopTracking">
            <summary>
                Called when change tracking is stopped.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Domain.ChangeLog">
            <summary>
                Class represents the Change log on an object maintaining the list of <see cref="T:DimensionData.Toolset.Domain.PropertyChange" />. The class is
                usually attached to an aggregate root.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Domain.ChangeLog.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Domain.ChangeLog" /> class.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Domain.ChangeLog.Changes">
            <summary>
                Gets the property changes.
            </summary>
            <value>The property changes.</value>
        </member>
        <member name="P:DimensionData.Toolset.Domain.ChangeLog.HasChanges">
            <summary>
                Gets a value indicating whether this instance has changes.
            </summary>
            <value><c>true</c> if this instance has changes; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:DimensionData.Toolset.Domain.IRepository">
            <summary>
                Interface to define (nominate) a repository class. The interface is empty because it is not meant to define
                operations for repositories as those are not known upfront.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Domain.IValueObject`1">
            <summary>
                Base interface for value type implementations.
            </summary>
            <typeparam name="TValueObject">The type of the value object.</typeparam>
        </member>
        <member name="P:DimensionData.Toolset.Domain.IValueObject`1.HasValue">
            <summary>
                Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:DimensionData.Toolset.Domain.IUnitOfWork">
            <summary>
                Interface defining a unit of work implementation.
            </summary>
            <remarks>
                see: http://martinfowler.com/eaaCatalog/unitOfWork.html
            </remarks>
        </member>
        <member name="M:DimensionData.Toolset.Domain.IUnitOfWork.Repository``1">
            <summary>
                Returns the repository representing the specified type.
            </summary>
            <typeparam name="TRepository">The type of the repository.</typeparam>
            <returns>The repository implementation of the specified type.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Domain.IUnitOfWork.SaveChanges">
            <summary>
                Commits the changes that occurred within the scope of the unit of work.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Domain.IUnitOfWork.SaveChangesAsync">
            <summary>
                Commits the changes that occurred within the scope of the unit of work.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Domain.Entity`1">
            <summary>
                Default Base Entity.
            </summary>
            <typeparam name="TId">The type of the primary identifier.</typeparam>
        </member>
        <member name="P:DimensionData.Toolset.Domain.Entity`1.Id">
            <summary>
                Gets or sets the entity identifier.
            </summary>
            <value>The entity identifier.</value>
        </member>
        <member name="M:DimensionData.Toolset.Domain.Entity`1.Clone">
            <summary>
                Clones this instance.
            </summary>
            <returns>The cloned entity.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Domain.Entity`1.Equals(DimensionData.Toolset.Domain.IEntity{`0})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Domain.Entity`1.SetField``1(``0@,``0,System.String)">
            <summary>
                Sets the field values.
            </summary>
            <typeparam name="TFieldType">The type of the field.</typeparam>
            <param name="field">The field to set.</param>
            <param name="value">The value to set.</param>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if the property is set to a new value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Domain.Entity`1.SetValueObjectField``1(``0@,``0,System.String)">
            <summary>
                Sets a value object field while tracking changes if change tracking is enabled.
            </summary>
            <typeparam name="TValueObject">The type of the value object.</typeparam>
            <param name="field">The field to set.</param>
            <param name="value">The value to set.</param>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if the property is set to a new value, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Domain.ValueObject`1">
            <summary>
                Represents a value object as specified by Domain Driven Design rules. The object has no identifier and equality is
                achieved by comparing property values.
            </summary>
            <typeparam name="TValueObject">The type of the t value object.</typeparam>
        </member>
        <member name="P:DimensionData.Toolset.Domain.ValueObject`1.HasValue">
            <summary>
                Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:DimensionData.Toolset.Domain.ValueObject`1.Equals(`0)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Domain.ValueObject`1.op_Equality(DimensionData.Toolset.Domain.ValueObject{`0},DimensionData.Toolset.Domain.ValueObject{`0})">
            <summary>
                Implements the operator ==.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Domain.ValueObject`1.op_Inequality(DimensionData.Toolset.Domain.ValueObject{`0},DimensionData.Toolset.Domain.ValueObject{`0})">
            <summary>
                Implements the operator !=.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Domain.ValueObject`1.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Domain.ValueObject`1.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Domain.IEntity`1">
            <summary>
                Interface IEntity
            </summary>
            <typeparam name="TId">The type of the primary identifier.</typeparam>
        </member>
        <member name="P:DimensionData.Toolset.Domain.IEntity`1.Id">
            <summary>
                Gets the entity identifier.
            </summary>
            <value>The entity identifier.</value>
        </member>
        <member name="T:DimensionData.Toolset.Domain.PropertyChange">
            <summary>
                Class representing the structure of a property value change.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Domain.PropertyChange.#ctor(System.String,System.Object,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Domain.PropertyChange" /> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="P:DimensionData.Toolset.Domain.PropertyChange.PropertyName">
            <summary>
                Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:DimensionData.Toolset.Domain.PropertyChange.OldValue">
            <summary>
                Gets the old value.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="P:DimensionData.Toolset.Domain.PropertyChange.NewValue">
            <summary>
                Gets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="T:DimensionData.Toolset.EventSourcing.AggregateConcurrencyException">
            <summary>
            The exception is thrown when updating an aggregate results in a concurrency conflict.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.AggregateConcurrencyException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.EventSourcing.AggregateConcurrencyException" /> class.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.AggregateConcurrencyException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.EventSourcing.AggregateConcurrencyException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.AggregateConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.EventSourcing.AggregateConcurrencyException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (Nothing in
                Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.AggregateConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.EventSourcing.AggregateConcurrencyException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="T:DimensionData.Toolset.EventSourcing.DomainEventWrapper">
            <summary>
                Wraps a <see cref="T:DimensionData.Toolset.Domain.IDomainEvent"/> with additional metadata.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.DomainEventWrapper.#ctor(System.Guid,System.Guid,System.Int32,System.Int32,DimensionData.Toolset.Domain.IDomainEvent)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.EventSourcing.DomainEventWrapper"/> class.
            </summary>
            <param name="eventId">The event identifier.</param>
            <param name="aggregateId">The aggregate identifier.</param>
            <param name="sequence">The sequence.</param>
            <param name="aggregateVersion">The aggregate version.</param>
            <param name="domainEvent">The domain event.</param>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.DomainEventWrapper.#ctor(System.Guid,System.Int32,System.Int32,DimensionData.Toolset.Domain.IDomainEvent)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.EventSourcing.DomainEventWrapper"/> class.
            </summary>
            <param name="aggregateId">The aggregate identifier.</param>
            <param name="sequence">The sequence.</param>
            <param name="aggregateVersion">The aggregate version.</param>
            <param name="domainEvent">The domain event.</param>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.DomainEventWrapper.#ctor(System.Guid,DimensionData.Toolset.Domain.IDomainEvent)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.EventSourcing.DomainEventWrapper"/> class.
            </summary>
            <param name="aggregateId">The aggregate identifier.</param>
            <param name="domainEvent">The domain event.</param>
        </member>
        <member name="P:DimensionData.Toolset.EventSourcing.DomainEventWrapper.Event">
            <summary>
                Gets the domain event.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.EventSourcing.DomainEventWrapper.EventName">
            <summary>
                Gets the name of the event.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.EventSourcing.DomainEventWrapper.EventId">
            <summary>
                Gets the event identifier.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.EventSourcing.DomainEventWrapper.AggregateId">
            <summary>
                Gets the unique identifier of the aggregate.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.EventSourcing.DomainEventWrapper.Sequence">
            <summary>
                Gets the event sequence number.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.EventSourcing.DomainEventWrapper.CreatedOnUtc">
            <summary>
                Gets the date and time when the event was created (UTC).
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.EventSourcing.DomainEventWrapper.CreatedBy">
            <summary>
                Gets the name of the user who caused the event.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.EventSourcing.DomainEventWrapper.AggregateVersion">
            <summary>
                Gets the version of the aggregate.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.EventSourcing.EventSourcedAggregateRoot">
            <summary>
                Base class for an event sourced aggregate.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.EventSourcedAggregateRoot.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.EventSourcing.EventSourcedAggregateRoot" /> class.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.EventSourcing.EventSourcedAggregateRoot.LastEventSequence">
            <summary>
                Gets or sets the last event sequence.
            </summary>
            <value>The last event sequence.</value>
        </member>
        <member name="P:DimensionData.Toolset.EventSourcing.EventSourcedAggregateRoot.Version">
            <summary>
                Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:DimensionData.Toolset.EventSourcing.EventSourcedAggregateRoot.UncommittedEvents">
            <summary>
                Gets the uncommitted events.
            </summary>
            <value>The uncommitted events.</value>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.EventSourcedAggregateRoot.MarkAsCommitted">
            <summary>
                Marks the aggregate root as committed. Clears all uncommitted events.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.EventSourcedAggregateRoot.Replay(System.Collections.Generic.IEnumerable{DimensionData.Toolset.EventSourcing.DomainEventWrapper})">
            <summary>
                Replays the specified historical events.
            </summary>
            <param name="historicalEvents">The historical events.</param>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.EventSourcedAggregateRoot.ApplyChange(DimensionData.Toolset.Domain.IDomainEvent)">
            <summary>
                Applies the specified event.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="T:DimensionData.Toolset.EventSourcing.IAggregateMemento">
            <summary>
                Defines the contract for an event sourced aggregate snapshot.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.EventSourcing.IAggregateMemento.AggregateRootId">
            <summary>
                Gets the aggregate root identifier.
            </summary>
            <value>The aggregate root identifier.</value>
        </member>
        <member name="P:DimensionData.Toolset.EventSourcing.IAggregateMemento.LastEventSequence">
            <summary>
                Gets the last event sequence.
            </summary>
            <value>The last event sequence.</value>
        </member>
        <member name="P:DimensionData.Toolset.EventSourcing.IAggregateMemento.Version">
            <summary>
                Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:DimensionData.Toolset.EventSourcing.IAggregateMemento.Payload">
            <summary>
                Gets the payload.
            </summary>
            <value>The payload.</value>
        </member>
        <member name="T:DimensionData.Toolset.EventSourcing.IEventStore`1">
            <summary>
                Interface defining contracts used for aggregate domain events persistence.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.IEventStore`1.Save(`0)">
            <summary>
                Saves the specified aggregate root.
            </summary>
            <param name="aggregateRoot">The aggregate root.</param>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.IEventStore`1.GetById(System.Guid)">
            <summary>
                Gets the aggregate by identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns>The instance of the persisted aggregate.</returns>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.IEventStore`1.GetAggregateEvents(System.Guid)">
            <summary>
                Gets all previous aggregate events.
            </summary>
            <param name="aggregateRootId">The aggregate root identifier.</param>
            <returns>
                A list of <see cref="T:DimensionData.Toolset.EventSourcing.DomainEventWrapper" /> wrapping the events of the
                <see cref="T:DimensionData.Toolset.EventSourcing.EventSourcedAggregateRoot" />.
            </returns>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.IEventStore`1.GetAggregateEvents(System.Guid,System.Int32)">
            <summary>
                Gets all previous aggregate events starting from a specific sequence number.
            </summary>
            <param name="aggregateRootId">The aggregate root identifier.</param>
            <param name="startSequenceNumber">The sequence number to start loading from.</param>
            <returns>
                A list of <see cref="T:DimensionData.Toolset.EventSourcing.DomainEventWrapper" /> wrapping the events of the
                <see cref="T:DimensionData.Toolset.EventSourcing.EventSourcedAggregateRoot" />.
            </returns>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.IEventStore`1.GetAggregateEvents``1(System.Guid)">
            <summary>
                Gets the aggregate events of a specific type.
            </summary>
            <typeparam name="TDomainEvent">The type of the domain event by which to retrieve.</typeparam>
            <param name="aggregateRootId">The aggregate root identifier.</param>
            <returns>
                A list of <see cref="T:DimensionData.Toolset.EventSourcing.DomainEventWrapper" /> wrapping the events of the
                <see cref="T:DimensionData.Toolset.EventSourcing.EventSourcedAggregateRoot" />.
            </returns>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.IEventStore`1.GetAggregateEvents(System.Guid,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
                Gets the aggregate events that are specified within the supplied types.
            </summary>
            <param name="aggregateRootId">The aggregate root identifier.</param>
            <param name="domainEventTypes">The domain event types.</param>
            <returns>
                A list of <see cref="T:DimensionData.Toolset.EventSourcing.DomainEventWrapper" /> wrapping the events of the
                <see cref="T:DimensionData.Toolset.EventSourcing.EventSourcedAggregateRoot" />.
            </returns>
        </member>
        <member name="T:DimensionData.Toolset.EventSourcing.ISnapshotRepository`1">
            <summary>
                Defines contract for a snapshot repository. Snapshots are generated to ease the load effort when an aggregate has a
                considerable number of events.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
        </member>
        <member name="P:DimensionData.Toolset.EventSourcing.ISnapshotRepository`1.SnapshotInterval">
            <summary>
                Gets the snapshot interval.
            </summary>
            <value>The snapshot interval.</value>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.ISnapshotRepository`1.SaveSnapshot(`0)">
            <summary>
                Saves the snapshot.
            </summary>
            <param name="aggregateRoot">The aggregate root.</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:DimensionData.Toolset.EventSourcing.ISnapshotRepository`1.GetLatestSnapshot(System.Guid)">
            <summary>
                Gets the latest snapshot.
            </summary>
            <param name="aggregateId">The aggregate identifier.</param>
            <returns>A previously snapshotted instance of the aggregate.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Extensions.CollectionExtensions">
            <summary>
                Class containing <see cref="T:System.Collections.Generic.ICollection`1" /> utilities.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Extensions.CollectionExtensions.AddUnique``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
                Adds an item to a collection only if it doesn't exist.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</param>
            <param name="value">The value to be added.</param>
            <returns><c>true</c> if the value was added, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> is <c>null</c>.</exception>
        </member>
        <member name="M:DimensionData.Toolset.Extensions.CollectionExtensions.AddUniqueRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds items to a collection. Only items that do not exist are added to the list.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</param>
            <param name="values">The values to be added.</param>
            <returns>The number of unique items added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> is <c>null</c>.</exception>
        </member>
        <member name="T:DimensionData.Toolset.Extensions.ObjectExtensions">
            <summary>
                Class with <see cref="T:System.Object" /> utilities.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Extensions.ObjectExtensions.FromByteArray``1(System.Byte[])">
            <summary>
                Deserializes the data on the provided byte array and reconstitutes the graph of objects.
            </summary>
            <typeparam name="T">The type of the object to deserialize and return.</typeparam>
            <param name="serializedObject">The byte array that contains the data to deserialize.</param>
            <returns>The top object of the deserialized graph.</returns>
            <exception cref="T:System.ArgumentNullException">the <paramref name="serializedObject" /> is null.</exception>
        </member>
        <member name="M:DimensionData.Toolset.Extensions.ObjectExtensions.ToByteArray(System.Object)">
            <summary>
                Serializes an object, or graph of objects with the given root to a byte array.
            </summary>
            <param name="value">
                The object, or root of the object graph, to serialize. All child objects of this root
                object are automatically serialized.
            </param>
            <returns>A new byte array representing the serialized object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null</exception>
        </member>
        <member name="M:DimensionData.Toolset.Extensions.ObjectExtensions.DeepClone``1(``0)">
            <summary>
                Creates a deep clone of the object using binary serialisation.
            </summary>
            <typeparam name="T">The type of the object to be cloned.</typeparam>
            <param name="item">The object to be cloned.</param>
            <returns>The clone of the object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="item" /> is null. </exception>
        </member>
        <member name="M:DimensionData.Toolset.Extensions.ObjectExtensions.ShallowCopy``1(``0)">
            <summary>
                A T extension method that shallow copy.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="item">The item to act on.</param>
            <returns>A shallow copy of the object.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Extensions.ObjectExtensions.ToXml(System.Object,System.IO.Stream)">
            <summary>
                Serializes an object to XML and places the content into a <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="valueToSerialize">The object to serialize.</param>
            <param name="stream">The <see cref="T:System.IO.Stream" /> where the serialized object content will be inserted.</param>
            <exception cref="T:System.ArgumentNullException">
                either <paramref name="valueToSerialize" /> or
                <paramref name="stream" /> is <c>null</c>
            </exception>
        </member>
        <member name="M:DimensionData.Toolset.Extensions.ObjectExtensions.ToXml(System.Object,System.IO.TextWriter)">
            <summary>
                Serializes an object to XML and places the content into a <see cref="T:System.IO.TextWriter" />.
            </summary>
            <param name="valueToSerialize">The object to serialize.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter" /> where the serialized object content will be inserted.</param>
            <exception cref="T:System.ArgumentNullException">
                either <paramref name="valueToSerialize" /> or
                <paramref name="writer" /> is <c>null</c>
            </exception>
        </member>
        <member name="M:DimensionData.Toolset.Extensions.ObjectExtensions.ToXmlString(System.Object)">
            <summary>
                Serializes an object to an XML string.
            </summary>
            <param name="valueToSerialize">The object to serialize.</param>
            <returns>An XML representation of the serialized object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueToSerialize" /> is null</exception>
        </member>
        <member name="M:DimensionData.Toolset.Extensions.ObjectExtensions.DeserializeFromXmlString``1(System.String)">
            <summary>
                Deserializes an object from XML string representing the serialised object.
            </summary>
            <typeparam name="T">The type of the object to be serialized.</typeparam>
            <param name="xmlValue">The XML string representing the object in its serialized state.</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="xmlValue" /> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">
                The XML string could not be deserialized into the specified type
                <typeparamref name="T" />.
            </exception>
        </member>
        <member name="T:DimensionData.Toolset.Extensions.TypeExtensions">
            <summary>
                Class containing <see cref="T:System.Type" /> utilities.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Extensions.TypeExtensions.IsClosedTypeOf(System.Type,System.Type)">
            <summary>
                Determines whether the type is a closed type of an open generic type.
            </summary>
            <param name="type">The type to check.</param>
            <param name="openGenericType">The open generic type.</param>
            <returns>/// <c>true</c> if the type if a closed type of the specified open generic type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Extensions.TypeExtensions.Inherits(System.Type,System.Type)">
            <summary>
                Returns <c>true</c> if the supplied <paramref name="type" /> inherits from the given class
                <paramref name="baseType" />.
            </summary>
            <param name="baseType">The type (class) to check for.</param>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if the given type inherits from the specified class.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseType" /> is <c>null</c>.</exception>
        </member>
        <member name="M:DimensionData.Toolset.Extensions.TypeExtensions.DefaultValue(System.Type)">
            <summary>
                Returns the default value for a specified <see cref="T:System.Type" />.
            </summary>
            <param name="type">The <see cref="T:System.Type" /> to return the default value for.</param>
            <returns>The default value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type" /> is <c>null</c>.</exception>
        </member>
        <member name="T:DimensionData.Toolset.HealthMonitoring.HealthCheckAttribute">
            <summary>
            An attribute that marks a health provider implementation
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.HealthMonitoring.HealthCheckAttribute.Id">
            <summary>
            An unique identifier of the health check
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.HealthMonitoring.HealthCheckAttribute.Name">
            <summary>
            The name of the health check
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.HealthMonitoring.HealthCheckDescriptor">
            <summary>
            Define the structure for a health check description.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.HealthMonitoring.HealthCheckDescriptor.HealthCheckTypeIdentifier">
            <summary>
            Gets or sets the health check type identifier.
            </summary>
            <value>
            The health check type identifier.
            </value>
        </member>
        <member name="P:DimensionData.Toolset.HealthMonitoring.HealthCheckDescriptor.HealthCheckName">
            <summary>
            The name of the health check.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.HealthMonitoring.HealthCheckDescriptor.SerializedHealthCheck">
            <summary>
            The serilaized string of the health check.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.HealthMonitoring.HealthCheckDispatcher">
            <summary>
            Dispatch a <see cref="T:DimensionData.Toolset.HealthMonitoring.IHealthCheck"/> to the registered <see cref="T:DimensionData.Toolset.HealthMonitoring.IHealthProvider`1"/>.
            </summary>
            <seealso cref="T:DimensionData.Toolset.HealthMonitoring.IHealthCheckDispatcher" />
        </member>
        <member name="M:DimensionData.Toolset.HealthMonitoring.HealthCheckDispatcher.#ctor(DimensionData.Toolset.DependencyInjection.IDependencyContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.HealthMonitoring.HealthCheckDispatcher"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:DimensionData.Toolset.HealthMonitoring.HealthCheckDispatcher.PerformHealthCheck(DimensionData.Toolset.HealthMonitoring.IHealthCheck)">
            <summary>
            Performs the health check.
            </summary>
            <param name="healthCheck">The health check.</param>
            <returns>
            The result of the health check
            </returns>
        </member>
        <member name="T:DimensionData.Toolset.HealthMonitoring.HealthCheckExtensions">
            <summary>
            Helper methods for converting <see cref="T:DimensionData.Toolset.HealthMonitoring.HealthCheckDescriptor"/> and <see cref="T:DimensionData.Toolset.HealthMonitoring.IHealthCheck"/>.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.HealthMonitoring.HealthCheckExtensions.ToHealthCheckDescriptor(DimensionData.Toolset.HealthMonitoring.IHealthCheck,DimensionData.Toolset.Serialization.IStringSerializer)">
            <summary>
            Convert the <see cref="T:DimensionData.Toolset.HealthMonitoring.IHealthCheck"/> instance to the health check descriptor.
            </summary>
            <param name="healthCheck">The health check.</param>
            <param name="serializer">A string serializer to serialize the health check instance into a string</param>
        </member>
        <member name="M:DimensionData.Toolset.HealthMonitoring.HealthCheckExtensions.ToHealthCheck(DimensionData.Toolset.HealthMonitoring.HealthCheckDescriptor,DimensionData.Toolset.Serialization.IStringSerializer)">
            <summary>
            Convert the <see cref="T:DimensionData.Toolset.HealthMonitoring.HealthCheckDescriptor"/> into an instance of <see cref="T:DimensionData.Toolset.HealthMonitoring.IHealthCheck"/>.
            </summary>
            <param name="healthCheckDescriptor">The health check descriptor.</param>
            <param name="serializer">A string serializer to deserialize the health check instance from a string</param>
            <exception cref="T:System.InvalidOperationException">Health check descriptor contains empty context data.</exception>
        </member>
        <member name="T:DimensionData.Toolset.HealthMonitoring.HealthCheckRegistrationExtension">
            <summary>
            Helper extension methods for registering <see cref="T:DimensionData.Toolset.HealthMonitoring.IHealthCheck"/> and <see cref="T:DimensionData.Toolset.HealthMonitoring.IHealthProvider`1"/>
            for dependency injection.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.HealthMonitoring.HealthCheckRegistrationExtension.RegisterHealthProvider``2(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
            Registers the health provider.
            </summary>
            <typeparam name="THealthCheck">The type of the health check.</typeparam>
            <typeparam name="THealthProvider">The type of the health provider.</typeparam>
            <param name="containerBuilder">The container builder.</param>
            <returns></returns>
        </member>
        <member name="T:DimensionData.Toolset.HealthMonitoring.HealthResult">
            <summary>
            Define the result obtained from a health monitor
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.HealthMonitoring.HealthResult.Status">
            <summary>
            The status of the diagnostic result.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.HealthMonitoring.HealthResult.ResultDescription">
            <summary>
            A description about the result of the diagnostic.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.HealthMonitoring.HealthResult.ExceptionDetails">
            <summary>
            Exception details if there are any caused from the diagnostic run.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.HealthMonitoring.HealthResult.HealthCheckUtc">
            <summary>
            The UTC date/time when the health check was done.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.HealthMonitoring.HealthStatus">
            <summary>
            An enumeration of health status returned from a health monitor
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.HealthMonitoring.HealthStatus.Unknown">
            <summary>
            The status is unknown.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.HealthMonitoring.HealthStatus.Ok">
            <summary>
            Health is ok.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.HealthMonitoring.HealthStatus.Warning">
            <summary>
            Warning - Something is not all right. But main functionality is not affected.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.HealthMonitoring.HealthStatus.Critical">
            <summary>
            Critical - Something is wrong. Main functionality is affected.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.HealthMonitoring.IHealthCheck">
            <summary>
            A health check describes what system or component is to be checked. 
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.HealthMonitoring.IHealthCheckDispatcher">
            <summary>
            Defines the interface for dispatching a <see cref="T:DimensionData.Toolset.HealthMonitoring.IHealthCheck"/> to the registered <see cref="T:DimensionData.Toolset.HealthMonitoring.IHealthProvider`1"/>
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.HealthMonitoring.IHealthCheckDispatcher.PerformHealthCheck(DimensionData.Toolset.HealthMonitoring.IHealthCheck)">
            <summary>
            Performs the health check.
            </summary>
            <param name="healthCheck">The health check.</param>
            <returns>The result of the health check</returns>
        </member>
        <member name="T:DimensionData.Toolset.HealthMonitoring.IHealthCheckProvider">
            <summary>
            A provider for returning all available health checks in the system
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.HealthMonitoring.IHealthCheckProvider.GetHealthChecks">
            <summary>
            Returns all the health checks in the system.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.HealthMonitoring.IHealthProvider`1">
            <summary>
            Defines a health provider that can perform health check.
            </summary>
            <typeparam name="THealthCheck">The type of the health check. is a data contract that describes what should be checked.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.HealthMonitoring.IHealthProvider`1.PerformHealthCheck(`0)">
            <summary>
            Perform the health check
            </summary>
            <returns>
            The result of the health check
            </returns>
        </member>
        <member name="T:DimensionData.Toolset.Initialization.AppInitializerExtensions">
            <summary>
            Provides extension methods for the <see cref="T:DimensionData.Toolset.Initialization.IAppInitializer"/> class to configure common toolset services.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.AppInitializerExtensions.UseAppSettingsConfigurationStore(DimensionData.Toolset.Initialization.IAppInitializer)">
            <summary>
            Uses the app settings configuration store.
            </summary>
            <param name="app">The application initializer.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.AppInitializerExtensions.UseAppSettingsSecureConfigurationStore(DimensionData.Toolset.Initialization.IAppInitializer)">
            <summary>
            Uses the app settings secure configuration store.
            </summary>
            <param name="app">The application initializer.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Initialization.CommonActionIds">
            <summary>
            Provides common action identifiers.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Initialization.CommonActionIds.UseServiceDiscoveryClientActionId">
            <summary>
            The action identifier for the registration of <see cref="T:DimensionData.Toolset.ServiceDiscovery.IServiceDiscoveryClient"/>.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Initialization.CommonActionIds.UseContainerActionId">
            <summary>
            The action identifier for the registration of <see cref="T:DimensionData.Toolset.DependencyInjection.IDependencyContainer"/>.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Initialization.CommonActionIds.UseLoggerActionId">
            <summary>
            The action identifier for the registration of <see cref="T:DimensionData.Toolset.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Initialization.CommonActionIds.UseSystemEventBusActionId">
            <summary>
            The action identifier for the registration of <see cref="T:DimensionData.Toolset.Cqrs.ISystemEventBus"/>.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Initialization.CommonActionIds.UseConfigurationStoreActionId">
            <summary>
            The action identifier for the registration of <see cref="T:DimensionData.Toolset.Configuration.ISecureConfigurationStore"/>.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Initialization.CommonActionIds.UseSecureConfigurationStoreActionId">
            <summary>
            The action identifier for the registration of <see cref="T:DimensionData.Toolset.Configuration.ISecureConfigurationStore"/>.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Initialization.IAppInitializer">
            <summary>
            A utility class to configure the Dimension Data Toolset in OWIN applications.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.IAppInitializer.SetContainerBuilder(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
            Sets the dependency injection container builder.
            </summary>
            <param name="containerBuilder">The dependency injection container builder.</param>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.IAppInitializer.AddContainerBuilderAction(System.Action{DimensionData.Toolset.Initialization.ContainerBuilderContext})">
            <summary>
            Adds a configuration action which uses the container builder.
            </summary>
            <param name="action">The action to invoke.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.IAppInitializer.AddContainerBuilderAction(System.Guid,System.Action{DimensionData.Toolset.Initialization.ContainerBuilderContext})">
            <summary>
            Adds a configuration action which uses the container builder.
            </summary>
            <param name="actionId">The unique identifier of the action.</param>
            <param name="action">The action to invoke.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.IAppInitializer.RemoveContainerBuilderAction(System.Guid)">
            <summary>
            Removes a configuration action which uses the container builder.
            </summary>
            <param name="actionId">The unique identifier of the action.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.IAppInitializer.AddContainerAction(System.Action{DimensionData.Toolset.Initialization.ContainerContext})">
            <summary>
            Adds a configuration action which uses the container.
            </summary>
            <param name="action">The action to invoke.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.IAppInitializer.AddContainerAction(System.Guid,System.Action{DimensionData.Toolset.Initialization.ContainerContext})">
            <summary>
            Adds a configuration action which uses the container.
            </summary>
            <param name="actionId">The unique identifier of the action.</param>
            <param name="action">The action to invoke.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.IAppInitializer.RemoveContainerAction(System.Guid)">
            <summary>
            Removes a configuration action which uses the container.
            </summary>
            <param name="actionId">The unique identifier of the action.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.IAppInitializer.AddShutdownAction(System.Action)">
            <summary>
            Adds a shutdown action.
            </summary>
            <param name="action">The action to invoke.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.IAppInitializer.AddShutdownAction(System.Guid,System.Action)">
            <summary>
            Adds a shutdown action.
            </summary>
            <param name="actionId">The unique identifier of the action.</param>
            <param name="action">The action to invoke.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.IAppInitializer.RemoveShutdownAction(System.Guid)">
            <summary>
            Removes a shutdown action.
            </summary>
            <param name="actionId">The unique identifier of the action.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Initialization.AppInitializerBase">
            <summary>
            A utility class to configure the Dimension Data Toolset in OWIN applications.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.AppInitializerBase.#ctor(System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.Initialization.AppInitializerBase"/> class.
            </summary>
            <param name="customContextServices">The custom context services.</param>
        </member>
        <member name="P:DimensionData.Toolset.Initialization.AppInitializerBase.ContainerBuilderActions">
            <summary>
            Gets the container builder actions.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Initialization.AppInitializerBase.ContainerActions">
            <summary>
            Gets the container actions.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Initialization.AppInitializerBase.ShutdownActions">
            <summary>
            Gets the shutdown actions.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.AppInitializerBase.SetContainerBuilder(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder)">
            <summary>
            Sets the dependency injection container builder.
            </summary>
            <param name="containerBuilder">The dependency injection container builder.</param>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.AppInitializerBase.AddContainerBuilderAction(System.Action{DimensionData.Toolset.Initialization.ContainerBuilderContext})">
            <summary>
            Adds a configuration action which uses the container builder.
            </summary>
            <param name="action">The action to invoke.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.AppInitializerBase.AddContainerBuilderAction(System.Guid,System.Action{DimensionData.Toolset.Initialization.ContainerBuilderContext})">
            <summary>
            Adds a configuration action which uses the container builder.
            </summary>
            <param name="actionId">The unique identifier of the action.</param>
            <param name="action">The action to invoke.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.AppInitializerBase.RemoveContainerBuilderAction(System.Guid)">
            <summary>
            Removes a configuration action which uses the container builder.
            </summary>
            <param name="actionId">The unique identifier of the action.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.AppInitializerBase.AddContainerAction(System.Action{DimensionData.Toolset.Initialization.ContainerContext})">
            <summary>
            Adds a configuration action which uses the container.
            </summary>
            <param name="action">The action to invoke.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.AppInitializerBase.AddContainerAction(System.Guid,System.Action{DimensionData.Toolset.Initialization.ContainerContext})">
            <summary>
            Adds a configuration action which uses the container.
            </summary>
            <param name="actionId">The unique identifier of the action.</param>
            <param name="action">The action to invoke.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.AppInitializerBase.RemoveContainerAction(System.Guid)">
            <summary>
            Removes a configuration action which uses the container.
            </summary>
            <param name="actionId">The unique identifier of the action.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.AppInitializerBase.AddShutdownAction(System.Action)">
            <summary>
            Adds a shutdown action.
            </summary>
            <param name="action">The action to invoke.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.AppInitializerBase.AddShutdownAction(System.Guid,System.Action)">
            <summary>
            Adds a shutdown action.
            </summary>
            <param name="actionId">The unique identifier of the action.</param>
            <param name="action">The action to invoke.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.AppInitializerBase.RemoveShutdownAction(System.Guid)">
            <summary>
            Removes a shutdown action.
            </summary>
            <param name="actionId">The unique identifier of the action.</param>
            <returns>The application initializer instance for fluent configuration.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.AppInitializerBase.Build">
            <summary>
            Builds this OWIN application.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Initialization.ContainerBuilderContext">
            <summary>
            The context of a configuration action using the container builder.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.ContainerBuilderContext.#ctor(DimensionData.Toolset.DependencyInjection.IDependencyContainerBuilder,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.Initialization.ContainerBuilderContext"/> class.
            </summary>
            <param name="containerBuilder">The dependency injection container builder.</param>
            <param name="customContextServices">The custom context services.</param>
        </member>
        <member name="P:DimensionData.Toolset.Initialization.ContainerBuilderContext.ContainerBuilder">
            <summary>
            Gets the dependency injection container builder.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.ContainerBuilderContext.Get``1">
            <summary>
            Gets a custom initialization service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>The service instance.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Initialization.ContainerContext">
            <summary>
            The context of a configuration action using the container.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.ContainerContext.#ctor(DimensionData.Toolset.DependencyInjection.IDependencyContainer,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.Initialization.ContainerContext" /> class.
            </summary>
            <param name="container">The dependency injection container.</param>
            <param name="customContextServices">The custom context services.</param>
        </member>
        <member name="P:DimensionData.Toolset.Initialization.ContainerContext.Container">
            <summary>
            Gets the dependency injection container.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Initialization.ContainerContext.Get``1">
            <summary>
            Gets a custom initialization service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>The service instance.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Logging.ILogger">
            <summary>
                Represents a type used to perform logging.
            </summary>
            <remarks>Aggregates most logging patterns to a single method.</remarks>
        </member>
        <member name="M:DimensionData.Toolset.Logging.ILogger.Log``1(DimensionData.Toolset.Logging.LogLevel,System.Int32,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
                Writes a log entry.
            </summary>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="eventId">Id of the event.</param>
            <param name="state">The entry to be written. Can be also an object.</param>
            <param name="exception">The exception related to this entry.</param>
            <param name="formatter">
                Function to create a <c>string</c> message of the <paramref name="state" /> and
                <paramref name="exception" />.
            </param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.ILogger.IsEnabled(DimensionData.Toolset.Logging.LogLevel)">
            <summary>
                Checks if the given <paramref name="logLevel" /> is enabled.
            </summary>
            <param name="logLevel">level to be checked.</param>
            <returns><c>true</c> if enabled.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Logging.Internal.FormattedLogValues">
            <summary>
                LogValues to enable formatting options supported by <see cref="M:string.Format" />.
                This also enables using {NamedformatItem} in the format string.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Logging.Internal.LogValuesFormatter">
            <summary>
                Formatter to convert the named format items like {NamedformatItem} to <see cref="M:string.Format" /> format.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Logging.LoggerExtensions">
            <summary>
                ILogger extension methods for common scenarios.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogDebug(DimensionData.Toolset.Logging.ILogger,System.Int32,System.Exception,System.String,System.Object[])">
            <summary>
                Formats and writes a debug log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogDebug(DimensionData.Toolset.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
                Formats and writes a debug log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogDebug(DimensionData.Toolset.Logging.ILogger,System.String,System.Object[])">
            <summary>
                Formats and writes a debug log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogTrace(DimensionData.Toolset.Logging.ILogger,System.Int32,System.Exception,System.String,System.Object[])">
            <summary>
                Formats and writes a trace log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogTrace(DimensionData.Toolset.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
                Formats and writes a trace log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogTrace(DimensionData.Toolset.Logging.ILogger,System.String,System.Object[])">
            <summary>
                Formats and writes a trace log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogInformation(DimensionData.Toolset.Logging.ILogger,System.Int32,System.Exception,System.String,System.Object[])">
            <summary>
                Formats and writes an informational log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogInformation(DimensionData.Toolset.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
                Formats and writes an informational log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogInformation(DimensionData.Toolset.Logging.ILogger,System.String,System.Object[])">
            <summary>
                Formats and writes an informational log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogWarning(DimensionData.Toolset.Logging.ILogger,System.Int32,System.Exception,System.String,System.Object[])">
            <summary>
                Formats and writes a warning log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogWarning(DimensionData.Toolset.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
                Formats and writes a warning log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogWarning(DimensionData.Toolset.Logging.ILogger,System.String,System.Object[])">
            <summary>
                Formats and writes a warning log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogError(DimensionData.Toolset.Logging.ILogger,System.Int32,System.Exception,System.String,System.Object[])">
            <summary>
                Formats and writes an error log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogError(DimensionData.Toolset.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
                Formats and writes an error log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogError(DimensionData.Toolset.Logging.ILogger,System.String,System.Object[])">
            <summary>
                Formats and writes an error log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogCritical(DimensionData.Toolset.Logging.ILogger,System.Int32,System.Exception,System.String,System.Object[])">
            <summary>
                Formats and writes a critical log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogCritical(DimensionData.Toolset.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
                Formats and writes a critical log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:DimensionData.Toolset.Logging.LoggerExtensions.LogCritical(DimensionData.Toolset.Logging.ILogger,System.String,System.Object[])">
            <summary>
                Formats and writes a critical log message.
            </summary>
            <param name="logger">The <see cref="T:DimensionData.Toolset.Logging.ILogger" /> to write to.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:DimensionData.Toolset.Logging.LogLevel">
            <summary>
                Defines logging severity levels.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Logging.LogLevel.Trace">
            <summary>
                Logs that contain the most detailed messages. These messages may contain sensitive application data.
                These messages are disabled by default and should never be enabled in a production environment.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Logging.LogLevel.Debug">
            <summary>
                Logs that are used for interactive investigation during development.  These logs should primarily contain
                information useful for debugging and have no long-term value.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Logging.LogLevel.Information">
            <summary>
                Logs that track the general flow of the application. These logs should have long-term value.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Logging.LogLevel.Warning">
            <summary>
                Logs that highlight an abnormal or unexpected event in the application flow, but do not otherwise cause the
                application execution to stop.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Logging.LogLevel.Error">
            <summary>
                Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a
                failure in the current activity, not an application-wide failure.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Logging.LogLevel.Critical">
            <summary>
                Logs that describe an unrecoverable application or system crash, or a catastrophic failure that requires
                immediate attention.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Logging.LogLevel.None">
            <summary>
                Not used for writing log messages. Specifies that a logging category should not write any messages.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Querying.Filter">
            <summary>
                Simple property filter.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.Filter.PropertyName">
            <summary>
                Gets or sets the name of the property to filter by.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.Filter.Operator">
            <summary>
                Gets or sets the filter operator.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.Filter.Value">
            <summary>
                Gets or sets the value.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.Filter.IsNegation">
            <summary>
                Gets or sets a value indicating whether this filter is a negation.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Querying.FilterExtensions">
            <summary>
                Provides extension methods to convert filters into LINQ expressions.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Querying.FilterExtensions.GetPredicateBody``1(``0,System.Linq.Expressions.ParameterExpression)">
            <summary>
                Gets the predicate body for the supplied filter.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <param name="filter">The filter instance.</param>
            <param name="entityTypeExpression">The entity type expression.</param>
            <returns>The predicate body expression.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Querying.FilterExtensions.GetPredicateBody(DimensionData.Toolset.Querying.Filter,System.Linq.Expressions.ParameterExpression)">
            <summary>
                Gets the predicate body for the supplied filter.
            </summary>
            <param name="filter">The filter instance.</param>
            <param name="entityTypeExpression">The entity type expression.</param>
            <returns>The predicate body expression.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Querying.FilterExtensions.GetPredicateBody(DimensionData.Toolset.Querying.FilterGroup,System.Linq.Expressions.ParameterExpression)">
            <summary>
                Gets the predicate body for the supplied filter.
            </summary>
            <param name="filter">The filter instance.</param>
            <param name="entityTypeExpression">The entity type expression.</param>
            <returns>The predicate body expression.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Querying.FilterGroup">
            <summary>
                An implementation of <see cref="T:DimensionData.Toolset.Querying.IFilter" /> to use logical combinations (AND, OR).
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Querying.FilterGroup.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Querying.FilterGroup" /> class.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.FilterGroup.Segments">
            <summary>
                Gets or sets the filter segments.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.FilterGroup.IsNegation">
            <summary>
                Gets or sets a value indicating whether this filter is a negation.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Querying.FilterGroupOperator">
            <summary>
                The logical operator to be used in a <see cref="T:DimensionData.Toolset.Querying.FilterGroupSegment" />.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Querying.FilterGroupOperator.And">
            <summary>
                Logical AND operator.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Querying.FilterGroupOperator.Or">
            <summary>
                Logical OR perator.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Querying.FilterGroupSegment">
            <summary>
                The individual segment of a <see cref="T:DimensionData.Toolset.Querying.FilterGroup" />.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.FilterGroupSegment.Filter">
            <summary>
                Gets or sets the filter.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.FilterGroupSegment.Operator">
            <summary>
                Gets or sets the logical operator.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Querying.FilterOperator">
            <summary>
                The operator to be used by a <see cref="T:DimensionData.Toolset.Querying.Filter" />.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Querying.FilterOperator.IsEqualTo">
            <summary>
                The is equal to filter operator.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Querying.FilterOperator.IsNotEqualTo">
            <summary>
                The is not equal to filter operator.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Querying.FilterOperator.IsLessThan">
            <summary>
                The is less than filter operator.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Querying.FilterOperator.IsLessThanOrEqualTo">
            <summary>
                The is less than or equal to filter operator.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Querying.FilterOperator.IsGreaterThan">
            <summary>
                The is greater than filter operator.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Querying.FilterOperator.IsGreaterThanOrEqualTo">
            <summary>
                The is greater than or equal to filter operator.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Querying.FilterOperator.StartsWith">
            <summary>
                The string starts with filter operator.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Querying.FilterOperator.EndsWith">
            <summary>
                The string ends with filter operator.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Querying.FilterOperator.Contains">
            <summary>
                The string contains filter operator.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Querying.FilterOperatorExtensions">
            <summary>
                Provides extension methods to convert filters into expressions.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Querying.FilterOperatorExtensions.CreateBinaryExpression(DimensionData.Toolset.Querying.FilterOperator,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
                Creates the binary expression tree for the supplied filter.
            </summary>
            <param name="filterOperator">The filter operator.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="liftMemberAccess">A value indicating whether additional null-checks should be included into the query.</param>
            <returns>The binary expression tree.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Querying.IFilter">
            <summary>
                Base interface for filters.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.IFilter.IsNegation">
            <summary>
                Gets or sets a value indicating whether this filter is a negation.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Querying.OrderBy">
            <summary>
                Data contract to specify a sort operation.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.OrderBy.PropertyName">
            <summary>
                Gets or sets the name of the property to order by.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.OrderBy.Direction">
            <summary>
                Gets or sets the sort direction.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Querying.OrderByDirection">
            <summary>
                Specifies the direction of a sort operation.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Querying.OrderByDirection.Ascending">
            <summary>
                The ascending sort order.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Querying.OrderByDirection.Descending">
            <summary>
                The descending sort order.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Querying.QueryableExtensions">
            <summary>
                Provides extension methods for <see cref="T:System.Linq.IQueryable`1" /> to apply custom query options.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Querying.QueryableExtensions.ExecuteQueryOptions``1(System.Linq.IQueryable{``0},DimensionData.Toolset.Querying.QueryOptions)">
            <summary>
                Executes the supplied query options on the supplied queryable instance.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="queryable">The queryable instance.</param>
            <param name="options">The query options.</param>
            <returns>The query result.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Querying.QueryOptions">
            <summary>
                Data contract to request custom query options.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Querying.QueryOptions.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Querying.QueryOptions" /> class.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Querying.QueryOptions.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IList{DimensionData.Toolset.Querying.IFilter},System.Collections.Generic.IList{DimensionData.Toolset.Querying.OrderBy})">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Querying.QueryOptions" /> class.
            </summary>
            <param name="skip">The number of items to skip.</param>
            <param name="top">The number of items to return.</param>
            <param name="filters">The filters.</param>
            <param name="orderBy">The order by.</param>
        </member>
        <member name="P:DimensionData.Toolset.Querying.QueryOptions.Skip">
            <summary>
                Gets or sets the number of items to skip.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.QueryOptions.Top">
            <summary>
                Gets or sets the number of items to return.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.QueryOptions.Filter">
            <summary>
                Gets or sets the filters.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.QueryOptions.OrderBy">
            <summary>
                Gets or sets the order by clauses.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Querying.IQueryResult`1">
            <summary>
                Envelope to return the result of a paged and/or filtered request.
            </summary>
            <typeparam name="TItem">The type of the result collection item.</typeparam>
        </member>
        <member name="P:DimensionData.Toolset.Querying.IQueryResult`1.Skip">
            <summary>
                Gets or sets the number of items that have been skipped.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.IQueryResult`1.Take">
            <summary>
                Gets or sets the number of items that have been requested.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.IQueryResult`1.TotalCount">
            <summary>
                Gets or sets the total item count in case only a page is returned.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.IQueryResult`1.Items">
            <summary>
                Gets or sets the result items.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Querying.QueryOptionsProcessor`1">
            <summary>
                Executes <see cref="T:DimensionData.Toolset.Querying.QueryOptions" /> against <see cref="T:System.Linq.IQueryable" />.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Querying.QueryOptionsProcessor`1.#ctor(System.Linq.IQueryable{`0},DimensionData.Toolset.Querying.QueryOptions)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Querying.QueryOptionsProcessor`1" /> class.
            </summary>
            <param name="queryable">The queryable instance.</param>
            <param name="options">The query options to execute.</param>
        </member>
        <member name="M:DimensionData.Toolset.Querying.QueryOptionsProcessor`1.ProcessQuery">
            <summary>
                Processes the query.
            </summary>
            <returns>The query result.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Querying.QueryOptionsProcessor`1.ProcessQueryAsync``1(System.Func{System.Linq.IQueryable{`0},System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{`0}}})">
            <summary>
            Processes the query asynchronous.
            </summary>
            <param name="asyncQueryExecutor">The asynchronous query executor function.</param>
            <returns></returns>
        </member>
        <member name="M:DimensionData.Toolset.Querying.QueryOptionsProcessor`1.ProcessQueryAsync(System.Func{System.Linq.IQueryable{`0},System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{`0}}})">
            <summary>
            Processes the query asynchronous.
            </summary>
            <param name="asyncQueryExecutor">The asynchronous query executor function.</param>
            <returns></returns>
        </member>
        <member name="M:DimensionData.Toolset.Querying.QueryOptionsProcessor`1.ProcessFiltering">
            <summary>
            Processes the filtering options.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Querying.QueryOptionsProcessor`1.ProcessSorting">
            <summary>
            Processes the sorting option
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Querying.QueryOptionsProcessor`1.ProcessPaging">
            <summary>
            Processes the paging option.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Querying.QueryOptionsProcessor`1.GetDefaultOrderBy">
            <summary>
            Gets the default order by.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">When using Skip, you must also specify at least on Order By. Alternatively mark one of the properties as the primary key to use it as the default sort property.</exception>
        </member>
        <member name="T:DimensionData.Toolset.Querying.QueryResult`1">
            <summary>
                Envelope to return the result of a paged and/or filtered request.
            </summary>
            <typeparam name="T">The type of the result collection item.</typeparam>
        </member>
        <member name="P:DimensionData.Toolset.Querying.QueryResult`1.Skip">
            <summary>
                Gets or sets the number of items that have been skipped.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.QueryResult`1.Take">
            <summary>
                Gets or sets the number of items that have been requested.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.QueryResult`1.TotalCount">
            <summary>
                Gets or sets the total item count in case only a page is returned.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Querying.QueryResult`1.Items">
            <summary>
                Gets or sets the result items.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Reflection.PrivateReflectionDynamicObject">
            <summary>
                http://blogs.msdn.com/b/davidebb/archive/2010/01/18/use-c-4-0-dynamic-to-drastically-simplify-your-private-reflection-code.aspx
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Reflection.ReferenceObjectPropertyCache">
            <summary>
                The class provides a reflection meta data cache for reference objects.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Reflection.ReferenceObjectPropertyCache.GetProperties``1">
            <summary>
                Gets the properties of the reference object type.
            </summary>
            <typeparam name="T">The type of object for which property meta data is to be returned.</typeparam>
            <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Reflection.ReferenceObjectPropertyCache.GetProperties(System.Type)">
            <summary>
                Gets the properties of the reference object type.
            </summary>
            <param name="referenceObjectType">Type of the reference object.</param>
            <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Reflection.ReferenceObjectPropertyCache.ClearCache">
            <summary>
            Clears the property cache.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Security.ConstantTimeComparer">
            <summary>
            Contains implementations of different security-sensitive compararers 
            that run at the constant time for all input values of the same length.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Security.ConstantTimeComparer.Compare(System.String,System.String)">
            <summary>
            Compares 2 strings with the constant time depending on the input value's length, i.e.,
            this method will run exactly the same time for all input values of the same length.
            </summary>
            <param name="inputValue">Input value from an external source.</param>
            <param name="storedValue">The value stored in the system.</param>
            <returns>True when strings contain the same content (binary comparison).</returns>
        </member>
        <member name="T:DimensionData.Toolset.Security.DimensionDataClaimTypes">
            <summary>
                Provides claim types keys commonly used by Dimension Data.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Security.DimensionDataClaimTypes.UserId">
            <summary>
                The user identifier claim type.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Security.DimensionDataClaimTypes.IdentityProvider">
            <summary>
                The identity provider that authenticated the user.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Security.DimensionDataClaimTypes.PrincipalType">
            <summary>
                The principal type.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Security.DimensionDataClaimTypes.OrganizationId">
            <summary>
                The organization identifier claim type.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Security.DimensionDataClaimTypes.OrganizationName">
            <summary>
                The organization name claim type.
            </summary>
        </member>
        <member name="F:DimensionData.Toolset.Security.DimensionDataClaimTypes.OriginalToken">
            <summary>
                The originally retrieved access token.
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.Security.HashingHelper">
            <summary>
            A helper class to calculate and verify cryptographic hashes.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Security.HashingHelper.ComputeHash(System.Byte[])">
            <summary>
            Calulcates a hash for the supplied secret.
            </summary>
            <param name="secret">The secret to calculate the hash from.</param>
            <returns>The hashed secret.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Security.HashingHelper.ComputeHash(System.Byte[],System.Byte[],System.String)">
            <summary>
            Calulcates a hash for the supplied secret.
            </summary>
            <param name="secret">The secret to calculate the hash from.</param>
            <param name="salt">The salt to include in the hash.</param>
            <param name="algorithm">The hash algorithm to use.</param>
            <returns>The hashed secret.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Security.HashingHelper.VerifyHash(System.Byte[],System.String)">
            <summary>
            Verifies the hashed secret.
            </summary>
            <param name="secret">The secret tp verify.</param>
            <param name="storedHash">The stored hash.</param>
            <returns>True if the secret matches the stored hash; otherwise false.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Security.HashingHelper.GenerateSalt(System.Int32)">
            <summary>
            Generates a salt.
            </summary>
            <param name="length">The salt length.</param>
            <returns>The generated salt.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Security.PrincipalExtensions">
            <summary>
                Provides commonly used extension methods for <see cref="T:System.Security.Principal.IPrincipal" /> and <see cref="T:System.Security.Claims.ClaimsPrincipal" />.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Security.PrincipalExtensions.AsClaimsPrincipal(System.Security.Principal.IPrincipal)">
            <summary>
                Gets the supplied principal as a <see cref="T:System.Security.Claims.ClaimsPrincipal" />.
            </summary>
            <param name="principal">The principal to cast.</param>
            <returns>The claims principal.</returns>
            <exception cref="T:System.InvalidOperationException">The supplied principal is not a claims principal.</exception>
        </member>
        <member name="M:DimensionData.Toolset.Security.PrincipalExtensions.GetClaim(System.Security.Claims.ClaimsPrincipal,System.String)">
            <summary>
                Gets the claim with the supplied type or thrown an exception if that claim does not exist.
            </summary>
            <param name="principal">The principal to get the claim from.</param>
            <param name="type">The claim type name.</param>
            <returns>The claim with the supplied type.</returns>
            <exception cref="T:System.InvalidOperationException">The principal does not have the requested claim.</exception>
        </member>
        <member name="T:DimensionData.Toolset.Serialization.DefaultXmlSerializer">
            <summary>
                Implementation of <see cref="T:DimensionData.Toolset.Serialization.IStringSerializer" /> using XML.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Serialization.DefaultXmlSerializer.Serialize(System.Object)">
            <summary>
                Serializes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>String representing serialized string.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Serialization.DefaultXmlSerializer.Deserialize``1(System.String)">
            <summary>
                Deserializes the specified serialized string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializedValue">The serialized string.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Serialization.IStringSerializer">
            <summary>
                Interface defining the operations of a serializer that serializes objects to strings and deserializes them from
                strings.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Serialization.IStringSerializer.Serialize(System.Object)">
            <summary>
                Serializes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>String representing serialized string.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Serialization.IStringSerializer.Deserialize``1(System.String)">
            <summary>
                Deserializes the specified serialized string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializedValue">The serialized string.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:DimensionData.Toolset.ServiceDiscovery.IServiceDiscoveryClient">
            <summary>
            Service Discovery Client
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.ServiceDiscovery.IServiceDiscoveryClient.FindService(System.String,System.String)">
            <summary>
            Returns a list of Service Definition objects
            </summary>
            <param name="service">Service name</param>
            <param name="tag">Tags for the service</param>
            <returns>Read only list of services</returns>
        </member>
        <member name="M:DimensionData.Toolset.ServiceDiscovery.IServiceDiscoveryClient.Register(DimensionData.Toolset.ServiceDiscovery.RegisterService)">
            <summary>
            Register a service
            </summary>
            <param name="service">Instance of a register service class</param>		
            <returns>Id of the created service or string.empty</returns>
        </member>
        <member name="M:DimensionData.Toolset.ServiceDiscovery.IServiceDiscoveryClient.Unregister(System.String)">
            <summary>
            Asks the client to unregister a service
            </summary>
            <param name="id">id to unregister</param>	
            <returns>True or false</returns>
        </member>
        <member name="M:DimensionData.Toolset.ServiceDiscovery.IServiceDiscoveryClient.GetAllServices">
            <summary>
            Gets all of the services for this node
            </summary>
            <returns></returns>
        </member>
        <member name="T:DimensionData.Toolset.ServiceDiscovery.RegisterService">
            <summary>
            Defines an instance of a class ready to be registered
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.ServiceDiscovery.RegisterService.Id">
            <summary>
            Gets the service identifier.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.ServiceDiscovery.RegisterService.Port">
            <summary>
            Port number for the registration
            </summary>		
        </member>
        <member name="P:DimensionData.Toolset.ServiceDiscovery.RegisterService.Name">
            <summary>
            Name for the service
            </summary>		
        </member>
        <member name="P:DimensionData.Toolset.ServiceDiscovery.RegisterService.Tags">
            <summary>
            Array of tags for the service registration
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.ServiceDiscovery.RegisterService.Address">
            <summary>
            Address for the service
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.ServiceDiscovery.Service">
            <summary>
            Service entry model
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.ServiceDiscovery.Service.ServiceName">
            <summary>
            Name of the service
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.ServiceDiscovery.Service.Tags">
            <summary>
            List of tags for the service
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.ServiceDiscovery.ServiceDefinition">
            <summary>
            Model for the service information
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.ServiceDiscovery.ServiceDefinition.HostName">
            <summary>
            Gets or sets hostname (e.g. localhost)
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.ServiceDiscovery.ServiceDefinition.Port">
            <summary>
            Gets or sets port for the service
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.ServiceDiscovery.ServiceDefinition.Tags">
            <summary>
            Gets or sets the list of tags.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.ServiceDiscovery.ServiceDefinition.ServiceId">
            <summary>
            Gets or sets the service identifier
            </summary>
        </member>
        <member name="T:DimensionData.Toolset.TransientFaultHandling.ITransientExceptionStrategy">
            <summary>
                Defines the contract of a utility class that checks if an <see cref="T:System.Exception" /> is transient (requires retries).
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.TransientFaultHandling.ITransientExceptionStrategy.IsTransient(System.Exception)">
            <summary>
                Determines whether the specified exception is transient.
            </summary>
            <param name="exception">The exception.</param>
            <returns><c>true</c> if the specified exception is transient; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:DimensionData.Toolset.TransientFaultHandling.RetryLimitExceededException">
            <summary>
                Exception that occurs when transient policies have been exhausted without a successful execution.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.TransientFaultHandling.RetryLimitExceededException.RetryExceptions">
            <summary>
                Gets the exceptions that took place while retries were being executed.
            </summary>
            <value>The retry exceptions.</value>
        </member>
        <member name="T:DimensionData.Toolset.TransientFaultHandling.RetryPolicy">
            <summary>
                Defines a policy for retrying operations.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.TransientFaultHandling.RetryPolicy.NumberOfRetries">
            <summary>
                Gets the number of retries.
            </summary>
            <value>The number of retries.</value>
        </member>
        <member name="P:DimensionData.Toolset.TransientFaultHandling.RetryPolicy.RetryWaitTime">
            <summary>
                Gets the retry wait time.
            </summary>
            <value>The retry wait time.</value>
        </member>
        <member name="P:DimensionData.Toolset.TransientFaultHandling.RetryPolicy.Exceptions">
            <summary>
                Gets the exceptions that occurred during the retries.
            </summary>
            <value>The exceptions.</value>
        </member>
        <member name="M:DimensionData.Toolset.TransientFaultHandling.RetryPolicy.CreateRetryPolicy(System.TimeSpan,System.Int32)">
            <summary>
                Creates the retry policy.
            </summary>
            <param name="retryWaitTime">The retry wait time.</param>
            <param name="numberOfRetries">The number of retries.</param>
            <returns>RetryPolicy.</returns>
            <exception cref="T:System.ArgumentException">The number of retries cannot be less than 2.</exception>
        </member>
        <member name="M:DimensionData.Toolset.TransientFaultHandling.RetryPolicy.CreateRetryPolicy(System.Int32,System.Int32)">
            <summary>
                Creates the retry policy.
            </summary>
            <param name="numberOfRetries">The number of retries.</param>
            <param name="retryWaitTimeInSeconds">The retry wait time in seconds.</param>
            <returns>RetryPolicy.</returns>
        </member>
        <member name="M:DimensionData.Toolset.TransientFaultHandling.RetryPolicy.ExecuteAction``2(System.Func{``0})">
            <summary>
                Executes the action.
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <typeparam name="TStrategy">The type of the t strategy.</typeparam>
            <param name="function">The function.</param>
            <returns>TResult.</returns>
        </member>
        <member name="M:DimensionData.Toolset.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Action)">
            <summary>
                Executes the action.
            </summary>
            <typeparam name="TStrategy">The type of the t strategy.</typeparam>
            <param name="action">The action.</param>
        </member>
        <member name="M:DimensionData.Toolset.TransientFaultHandling.RetryPolicy.ExecuteActionAsync``1(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the action asynchronously.
            </summary>
            <typeparam name="TStrategy">The type of the t strategy.</typeparam>
            <param name="actionAsync">The asynchronous action.</param>
        </member>
        <member name="M:DimensionData.Toolset.TransientFaultHandling.RetryPolicy.ExecuteFunction``2(System.Func{``1})">
            <summary>
                Executes the function.
            </summary>
            <typeparam name="TStrategy">The type of the t strategy.</typeparam>
            <typeparam name="TResponse">The type of the t response.</typeparam>
            <param name="func">The function.</param>
            <returns>The response.</returns>
        </member>
        <member name="M:DimensionData.Toolset.TransientFaultHandling.RetryPolicy.ExecuteFunctionAsync``2(System.Func{System.Threading.Tasks.Task{``1}})">
            <summary>
            Executes the function asynchronously.
            </summary>
            <typeparam name="TStrategy">The type of the strategy.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="funcAsync">The asynchronous function.</param>
            <returns>The response.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Utilities.CollectionChanges`1">
            <summary>
            Compares two collections to analyse the differences between them.
            </summary>
            <typeparam name="T">The type of item.</typeparam>
        </member>
        <member name="M:DimensionData.Toolset.Utilities.CollectionChanges`1.#ctor(System.Collections.Generic.IReadOnlyCollection{`0},System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DimensionData.Toolset.Utilities.CollectionChanges`1"/> class.
            </summary>
            <param name="addedItems">The added items.</param>
            <param name="removedItems">The removed items.</param>
        </member>
        <member name="P:DimensionData.Toolset.Utilities.CollectionChanges`1.AddedItems">
            <summary>
            Gets the items that have been added to the new collection.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Utilities.CollectionChanges`1.RemovedItems">
            <summary>
            Gets the items that have been removed from the new collection.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Utilities.CollectionChanges`1.Detect(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Compares the new collection to the old one to identify added and removed items.
            </summary>
            <param name="oldItems">The old collection.</param>
            <param name="newItems">The new collection.</param>
            <returns>The added and removed item collections.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Utilities.CollectionChanges`1.Detect(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Func{`0,`0,System.Boolean})">
            <summary>
            Compares the new collection to the old one to identify added and removed items.
            </summary>
            <param name="oldItems">The old collection.</param>
            <param name="newItems">The new collection.</param>
            <param name="comparer">The comparison function.</param>
            <returns>The added and removed item collections.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Utilities.SequentialGuid">
            <summary>
            A class to create sequential GUIDs.
            </summary>
            <remarks>
            Source: http://www.siepman.nl/blog/post/2015/06/20/SequentialGuid-Comb-Sql-Server-With-Creation-Date-Time-.aspx
            </remarks>
        </member>
        <member name="T:DimensionData.Toolset.Utilities.TransactionFactory">
            <summary>
                Creates <see cref="T:System.Transactions.TransactionScope" /> objects.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Utilities.TransactionFactory.CreateTransaction(System.Transactions.IsolationLevel,System.Transactions.TransactionScopeOption,System.Nullable{System.TimeSpan})">
            <summary>
                Creates a <see cref="T:System.Transactions.TransactionScope" /> object with the supplied options.
            </summary>
            <param name="isolationLevel">
                Specifies the isolation level of a transaction. Default is
                <see cref="F:System.Transactions.IsolationLevel.ReadCommitted" />
            </param>
            <param name="transactionScopeOption">
                Provides additional options for creating a transaction scope. Default is
                <see cref="F:System.Transactions.TransactionScopeOption.Required" />
            </param>
            <param name="timeout">{Optional} A <see cref="T:System.TimeSpan" /> value that specifies the time out period for the transaction</param>
            <returns>A new <see cref="T:System.Transactions.TransactionScope" /> object.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Utilities.TransactionFactory.CreateTransactionForAsync(System.Transactions.IsolationLevel,System.Transactions.TransactionScopeOption,System.Nullable{System.TimeSpan})">
            <summary>
                Creates a <see cref="T:System.Transactions.TransactionScope" /> object with the async operations support.
            </summary>
            <param name="isolationLevel">
                Specifies the isolation level of a transaction. Default is
                <see cref="F:System.Transactions.IsolationLevel.ReadCommitted" />
            </param>
            <param name="transactionScopeOption">
                Provides additional options for creating a transaction scope. Default is
                <see cref="F:System.Transactions.TransactionScopeOption.Required" />
            </param>
            <param name="timeout">{Optional} A <see cref="T:System.TimeSpan" /> value that specifies the time out period for the transaction</param>
            <returns>A new <see cref="T:System.Transactions.TransactionScope" /> object.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Utilities.GuidFactory">
            <summary>
                Contains utility methods for creating <see cref="T:System.Guid" />.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Utilities.GuidFactory.NewGuidComb">
            <summary>
                Generate a new <see cref="T:System.Guid" /> using the comb algorithm.
            </summary>
            <remarks>
                <para>
                    Guid generated using a strategy suggested by Jimmy Nilsson
                    <a href="http://www.informit.com/articles/article.asp?p=25862">article</a>
                </para>
            </remarks>
            <returns>A new <see cref="T:System.Guid" />.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Utilities.GuidFactory.NewSequentialGuid">
            <summary>
                Generate a new sequential <see cref="T:System.Guid"/>.
            </summary>
            <returns>A sequential <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Validation.Check">
            <summary>
                Class with validation utilities to be used for validating method input.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Check.NotNull(System.Object,System.String)">
            <summary>
                Enforces that an <see cref="T:System.Object" /> value is not null.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns>The value that has been successfully checked.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Check.NotNullOrEmpty(System.String,System.String)">
            <summary>
                Enforces that a <see cref="T:System.String" /> value is not <c>null</c> or empty, i.e. length is 0.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns>The value that has been successfully checked.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Check.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
                Enforces that a <see cref="T:System.String" /> value is not <c>null</c>, empty or consists only of whitespace characters.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns>The value that has been successfully checked.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Check.MaxLength(System.String,System.Int32,System.String)">
            <summary>
                Enforces that the length of a <see cref="T:System.String" /> value does not exceed a specified maximum
                number of characters.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="maximumLength">The maximum length allowed for the <see cref="T:System.String" /> value.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns>The value that has been successfully checked.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Check.MinLength(System.String,System.Int32,System.String)">
            <summary>
                Enforces that the length of a <see cref="T:System.String" /> value has at least a specified minimum
                number of characters.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="minimumLength">The minimum length.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns>The value that has been successfully checked.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Check.StringLength(System.String,System.Int32,System.Int32,System.String)">
            <summary>
                Enforces that the length of a <see cref="T:System.String" /> value has at least a specified minimum
                number of characters and does not exceed a specified maximum number of characters.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="minimumLength">The minimum length allowed for the <see cref="T:System.String" /> value.</param>
            <param name="maximumLength">The maximum length allowed for the <see cref="T:System.String" /> value.</param>
            <param name="argumentName">Name of the parameter.</param>
            <returns>The value that has been successfully checked.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Check.Email(System.String,System.String)">
            <summary>
                Enforces that a <see cref="T:System.String" /> value represents a valid email.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns>The value that has been successfully checked.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Check.Range``1(``0,``0,``0,System.String)">
            <summary>
                Enforces that a value falls within a specified range.
            </summary>
            <typeparam name="T">
                The type of the value to compare.
            </typeparam>
            <param name="value">
                The value to be checked. Must implement <see cref="T:System.IComparable" /> or
                <see cref="T:System.IComparable`1" />
            </param>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns>The value that has been successfully checked.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Check.Maximum``1(``0,``0,System.String)">
            <summary>
                Enforces that a value does not exceed a specified maximum.
            </summary>
            <typeparam name="T">
                The type of the value to compare.
            </typeparam>
            <param name="value">
                The value to be checked. Must implement <see cref="T:System.IComparable" /> or
                <see cref="T:System.IComparable`1" />
            </param>
            <param name="maxValue">The maximum value allowed.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns>The value that has been successfully checked.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Check.Minimum``1(``0,``0,System.String)">
            <summary>
                Enforces that a value is not less than a specified minimum.
            </summary>
            <typeparam name="T">
                The type of the value to compare.
            </typeparam>
            <param name="value">
                The value to be checked. Must implement <see cref="T:System.IComparable" /> or
                <see cref="T:System.IComparable`1" />
            </param>
            <param name="minValue">The minimum value allowed.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns>The value that has been successfully checked.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Check.Regex(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
                Enforces that a <see cref="T:System.String" /> value matches a specified regular expression pattern.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="regularExpression">The regular expression used for evaluation of the value.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="regexOptions">(Optional) Provides enumerated values to use to set regular expression options.</param>
            <returns>The value that has been successfully checked.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Check.Url(System.String,System.String)">
            <summary>
                Enforces that a <see cref="T:System.String" /> value is a valid url.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns>The value that has been successfully checked.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Check.NotEmpty(System.Guid,System.String)">
            <summary>
                Enforces that a <see cref="T:System.Guid" /> value is not <see cref="F:System.Guid.Empty" />.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns>The value that has been successfully checked.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Check.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
                Enforces that a <see cref="T:System.Collections.Generic.IEnumerable`1" /> value is not null or empty.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns>The value that has been successfully checked.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Check.Requires``1(``0,System.Predicate{``0},System.String)">
            <summary>
                Requires the provided value to satisfy the specified predicate.
            </summary>
            <typeparam name="T">The type of the value to be tested.</typeparam>
            <param name="value">The value to be checked.</param>
            <param name="predicate">The predicate which the value has to satisfy.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns>The value that has been successfully checked.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Validation.CollectionCountAttribute">
            <summary>
                A <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> which validates the number of items in a collection property.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Validation.CollectionCountAttribute.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Validation.CollectionCountAttribute" /> class.
            </summary>
            <param name="minCount">The minimum count.</param>
        </member>
        <member name="M:DimensionData.Toolset.Validation.CollectionCountAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Validation.CollectionCountAttribute" /> class.
            </summary>
            <param name="minCount">The minimum count.</param>
            <param name="maxCount">The maximum count.</param>
        </member>
        <member name="P:DimensionData.Toolset.Validation.CollectionCountAttribute.MinCount">
            <summary>
                Gets the minimum count.
            </summary>
        </member>
        <member name="P:DimensionData.Toolset.Validation.CollectionCountAttribute.MaxCount">
            <summary>
                Gets the maximum count.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Validation.CollectionCountAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
                Validated the provided value to ensure it is not empty.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The context information about the validation operation.</param>
            <returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.CollectionCountAttribute.GetCount(System.Object)">
            <summary>
                Gets the number of elements in the supplied collection value.
            </summary>
            <param name="value">The value.</param>
            <returns>The number of elements if available; otherwise null.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Validation.Internal.DataAnnotationsClassValidator">
            <summary>
                Provides and caches validators for class properties.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Internal.DataAnnotationsClassValidator.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Validation.Internal.DataAnnotationsClassValidator" /> class.
            </summary>
            <param name="type">The type of object to validate.</param>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Internal.DataAnnotationsClassValidator.Get(System.Type)">
            <summary>
                Gets the specified class validator instance for the supplied type.
            </summary>
            <param name="type">The type of object to validate.</param>
            <returns>The class validator instance for the supplied type.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Internal.DataAnnotationsClassValidator.Validate(System.Object)">
            <summary>
                Validates the specified object.
            </summary>
            <param name="container">The object to validate the properties from.</param>
            <returns>The validation results.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Internal.DataAnnotationsClassValidator.GetPropertyValidator(System.Reflection.PropertyInfo)">
            <summary>
                Gets the correct property validator for the supplied property type.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>The validator for the property.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Validation.Internal.DataAnnotationsComplexCollectionPropertyValidator">
            <summary>
                Validated the data annotations on a child object property.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Internal.DataAnnotationsComplexCollectionPropertyValidator.#ctor(System.Reflection.PropertyInfo)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Validation.Internal.DataAnnotationsComplexCollectionPropertyValidator" /> class.
            </summary>
            <param name="propertyInfo">The property information.</param>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Internal.DataAnnotationsComplexCollectionPropertyValidator.Validate(System.ComponentModel.DataAnnotations.ValidationContext,System.Object,System.Object)">
            <summary>
                Validates the property on the supplied object.
            </summary>
            <param name="context">The validation context.</param>
            <param name="container">The object providing the property.</param>
            <param name="value">The property value.</param>
            <returns>The validation results.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Validation.Internal.DataAnnotationsComplexPropertyValidator">
            <summary>
                Validated the data annotations on a collection of child object properties.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Internal.DataAnnotationsComplexPropertyValidator.#ctor(System.Reflection.PropertyInfo)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Validation.Internal.DataAnnotationsComplexPropertyValidator" /> class.
            </summary>
            <param name="propertyInfo">The property information.</param>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Internal.DataAnnotationsComplexPropertyValidator.Validate(System.ComponentModel.DataAnnotations.ValidationContext,System.Object,System.Object)">
            <summary>
                Validates the property on the supplied object.
            </summary>
            <param name="context">The validation context.</param>
            <param name="container">The object providing the property.</param>
            <param name="value">The property value.</param>
            <returns>The validation results.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Validation.Internal.DataAnnotationsPropertyValidator">
            <summary>
                Validated the data annotations on a property.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Internal.DataAnnotationsPropertyValidator.#ctor(System.Reflection.PropertyInfo)">
            <summary>
                Initializes a new instance of the <see cref="T:DimensionData.Toolset.Validation.Internal.DataAnnotationsPropertyValidator" /> class.
            </summary>
            <param name="propertyInfo">The property information.</param>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Internal.DataAnnotationsPropertyValidator.Validate(System.Object)">
            <summary>
                Validates the property on the supplied object.
            </summary>
            <param name="container">The object providing the property.</param>
            <returns>The validation results.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.Internal.DataAnnotationsPropertyValidator.Validate(System.ComponentModel.DataAnnotations.ValidationContext,System.Object,System.Object)">
            <summary>
                Validates the property on the supplied object.
            </summary>
            <param name="context">The validation context.</param>
            <param name="container">The object providing the property.</param>
            <param name="value">The property value.</param>
            <returns>The validation results.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Validation.DataAnnotationsValidator">
            <summary>
                Performs hierarchical object property validation using data annotation attributes and caching.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Validation.DataAnnotationsValidator.Validate(System.Object)">
            <summary>
                Validates the specified value.
            </summary>
            <param name="value">The object to validate.</param>
            <returns>The validation errors.</returns>
        </member>
        <member name="T:DimensionData.Toolset.Validation.FieldCheck">
            <summary>
                Class providing validation methods for properties.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Validation.FieldCheck.NotNull(System.Object,System.String)">
            <summary>
                Enforces that an <see cref="T:System.Object" /> value is not null.
            </summary>
            <param name="value">The field value to be checked.</param>
            <param name="propertyName">
                The name of the property where the field is being set.
                If the <paramref name="propertyName" /> is <c>null</c> the property name is automatically used.
            </param>
            <returns>The value that has been successfully checked.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="M:DimensionData.Toolset.Validation.FieldCheck.NotNullOrEmpty(System.String,System.String)">
            <summary>
                Enforces that a <see cref="T:System.String" /> value is not <c>null</c> or empty.
            </summary>
            <param name="value">The field value to be checked.</param>
            <param name="propertyName">
                The name of the property where the field is being set.
                If the <paramref name="propertyName" /> is <c>null</c> the property name is automatically used.
            </param>
            <returns>The value that has been successfully checked.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is <c>empty</c>.</exception>
        </member>
        <member name="M:DimensionData.Toolset.Validation.FieldCheck.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
                Enforces that a <see cref="T:System.String" /> value is not <c>null</c>, empty or consists only of whitespace characters.
            </summary>
            <param name="value">The field value to be checked.</param>
            <param name="propertyName">
                The name of the property where the field is being set.
                If the <paramref name="propertyName" /> is <c>null</c> the property name is automatically used.
            </param>
            <returns>The value that has been successfully checked.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="value" /> is <c>empty</c> or consists only of whitespace
                characters.
            </exception>
        </member>
        <member name="M:DimensionData.Toolset.Validation.FieldCheck.MaxLength(System.String,System.Int32,System.String)">
            <summary>
                Enforces that the length of a <see cref="T:System.String" /> value does not exceed a specified maximum
                length.
            </summary>
            <param name="value">The field value to be checked.</param>
            <param name="maximumLength">The maximum length allowed for the <see cref="T:System.String" /> value.</param>
            <param name="propertyName">
                The name of the property where the field is being set.
                If the <paramref name="propertyName" /> is <c>null</c> the property name is automatically used.
            </param>
            <returns>The value that has been successfully checked.</returns>
            <exception cref="T:System.InvalidOperationException">
                The <paramref name="maximumLength" /> parameter is less than or equal to
                0.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="value" /> length exceeds the <paramref name="maximumLength" />
                specified.
            </exception>
        </member>
        <member name="M:DimensionData.Toolset.Validation.FieldCheck.MinLength(System.String,System.Int32,System.String)">
            <summary>
                Enforces that the length of a <see cref="T:System.String" /> value has at least a specified minimum
                length.
            </summary>
            <param name="value">The field value to be checked.</param>
            <param name="minimumLength">The minimum length allowed for the <see cref="T:System.String" /> value.</param>
            <param name="propertyName">
                The name of the property where the field is being set.
                If the <paramref name="propertyName" /> is <c>null</c> the property name is automatically used.
            </param>
            <returns>The value that has been successfully checked.</returns>
            <remarks><c>null</c> values will pass the test.</remarks>
            <exception cref="T:System.InvalidOperationException">The <paramref name="minimumLength" /> value is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="value" /> length is less than the <paramref name="minimumLength" />
                specified.
            </exception>
        </member>
        <member name="M:DimensionData.Toolset.Validation.FieldCheck.StringLength(System.String,System.Int32,System.Int32,System.String)">
            <summary>
                Enforces that the length of a <see cref="T:System.String" /> value has at least a specified minimum
                length and does not exceed a specified maximum length.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="minimumLength">The minimum length allowed for the <see cref="T:System.String" /> value.</param>
            <param name="maximumLength">The maximum length allowed for the <see cref="T:System.String" /> value.</param>
            <param name="propertyName">
                The name of the property where the field is being set.
                If the <paramref name="propertyName" /> is <c>null</c> the property name is automatically used.
            </param>
            <returns>The value that has been successfully checked.</returns>
            <remarks><c>null</c> values will pass the test.</remarks>
            <exception cref="T:System.InvalidOperationException">
                The <paramref name="minimumLength" /> value is less than 0 or the
                <paramref name="maximumLength" /> value is less than or equal to 0.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="value" /> length is less than the
                <paramref name="minimumLength" /> specified or exceeds the <paramref name="maximumLength" /> specified.
            </exception>
        </member>
        <member name="M:DimensionData.Toolset.Validation.FieldCheck.Email(System.String,System.String)">
            <summary>
                Enforces that a <see cref="T:System.String" /> value is a valid email.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="propertyName">
                The name of the property where the field is being set.
                If the <paramref name="propertyName" /> is <c>null</c> the property name is automatically used.
            </param>
            <returns>The value that has been successfully checked.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not a valid email.</exception>
        </member>
        <member name="M:DimensionData.Toolset.Validation.FieldCheck.Range``1(``0,``0,``0,System.String)">
            <summary>
                Enforces that a value falls within a specified range.
            </summary>
            <typeparam name="T">
                The type of the value to compare.
            </typeparam>
            <param name="value">
                The value to be checked. Must implement <see cref="T:System.IComparable" /> or
                <see cref="T:System.IComparable`1" />
            </param>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
            <param name="propertyName">
                The name of the property where the field is being set.
                If the <paramref name="propertyName" /> is <c>null</c> the property name is automatically used.
            </param>
            <returns>The value that has been successfully checked.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="value" /> does not fall within the specified range. It is
                either less than <paramref name="minimum" /> value or larger than <paramref name="maximum" /> value specified.
            </exception>
        </member>
        <member name="M:DimensionData.Toolset.Validation.FieldCheck.Regex(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
                Enforces that a <see cref="T:System.String" /> value matches a specified regular expression pattern.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="regularExpression">The regular expression used for evaluation of the value.</param>
            <param name="propertyName">
                The name of the property where the field is being set.
                If the <paramref name="propertyName" /> is <c>null</c> the property name is automatically used.
            </param>
            <param name="regexOptions">Provides enumerated values to use to set regular expression options.</param>
            <returns>The value that has been successfully checked.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <c>null</c>.</exception>
            ///
            <exception cref="T:System.ArgumentNullException"><paramref name="regularExpression" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="value" /> does not match the
                <paramref name="regularExpression" /> pattern.
            </exception>
        </member>
        <member name="M:DimensionData.Toolset.Validation.FieldCheck.Url(System.String,System.String)">
            <summary>
                Enforces that a <see cref="T:System.String" /> value is a valid url.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="propertyName">
                The name of the property where the field is being set.
                If the <paramref name="propertyName" /> is <c>null</c> the property name is automatically used.
            </param>
            <returns>The value that has been successfully checked.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is not a valid URL.</exception>
        </member>
        <member name="M:DimensionData.Toolset.Validation.FieldCheck.NotEmpty(System.Guid,System.String)">
            <summary>
                Enforces that a <see cref="T:System.Guid" /> value is not <see cref="F:System.Guid.Empty" />.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="propertyName">
                The name of the property where the field is being set.
                If the <paramref name="propertyName" /> is <c>null</c> the property name is automatically used.
            </param>
            <returns>The value that has been successfully checked.</returns>
        </member>
        <member name="M:DimensionData.Toolset.Validation.FieldCheck.Maximum``1(``0,``0,System.String)">
            <summary>
                Enforces that a value does not exceed a specified maximum.
            </summary>
            <typeparam name="T">
                The type of the value to compare.
            </typeparam>
            <param name="value">
                The value to be checked. Must implement <see cref="T:System.IComparable" /> or
                <see cref="T:System.IComparable`1" />
            </param>
            <param name="maxValue">The maximum value.</param>
            <param name="propertyName">
                The name of the property where the field is being set.
                If the <paramref name="propertyName" /> is <c>null</c> the property name is automatically used.
            </param>
            <returns>The value that has been successfully checked.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="value" /> exceeds the specified <paramref name="maxValue" /> value.
            </exception>
        </member>
        <member name="M:DimensionData.Toolset.Validation.FieldCheck.Minimum``1(``0,``0,System.String)">
            <summary>
                Enforces that a value is not less than a specified minimum.
            </summary>
            <typeparam name="T">
                The type of the value to compare.
            </typeparam>
            <param name="value">
                The value to be checked. Must implement <see cref="T:System.IComparable" /> or
                <see cref="T:System.IComparable`1" />
            </param>
            <param name="minValue">The minimum value allowed.</param>
            <param name="propertyName">
                The name of the property where the field is being set.
                If the <paramref name="propertyName" /> is <c>null</c> the property name is automatically used.
            </param>
            <returns>The value that has been successfully checked.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="value" /> is less than the specified <paramref name="minValue" /> value.
            </exception>
        </member>
        <member name="M:DimensionData.Toolset.Validation.FieldCheck.Requires``1(``0,System.Predicate{``0},System.String)">
            <summary>
                Requires the provided value to satisfy the specified predicate.
            </summary>
            <typeparam name="T">The type of the value to be tested.</typeparam>
            <param name="value">The value to be checked.</param>
            <param name="predicate">The predicate which the value has to satisfy.</param>
            <param name="propertyName">
                The name of the property where the field is being set.
                If the <paramref name="propertyName" /> is <c>null</c> the property name is automatically used.
            </param>
            <returns>The value that has been successfully checked.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The value did not satisfy the specified predicate.</exception>
        </member>
        <member name="T:DimensionData.Toolset.Validation.NotEmptyAttribute">
            <summary>
                A <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> to ensure Guid or String properties are not empty.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.Validation.NotEmptyAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
                Validated the provided value to ensure it is not empty.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The context information about the validation operation.</param>
            <returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class.</returns>
        </member>
        <member name="T:DimensionData.Toolset.DisposableObject">
            <summary>
                Defines an object base with necessary disposable implementation.
            </summary>
            <remarks>
                Override the disposing method in children classes to perform cleanup.
                Implement Finalize only on objects that require finalization.
                There are performance costs associated with Finalize methods.
            </remarks>
        </member>
        <member name="P:DimensionData.Toolset.DisposableObject.IsDisposed">
            <summary>
                Gets a value indicating whether this instance is disposed.
            </summary>
            <value><c>true</c> if this instance is disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:DimensionData.Toolset.DisposableObject.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DimensionData.Toolset.DisposableObject.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:DimensionData.Toolset.DisposableObject.Disposing">
            <summary>
                Overridden in implementing objects to perform actual clean-up.
            </summary>
        </member>
    </members>
</doc>
